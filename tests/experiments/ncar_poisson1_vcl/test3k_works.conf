# Basic test case to prove code works
DIMENSION = 2

INNER_RADIUS = 0.5
OUTER_RADIUS = 1.0

# num bnd is linear, interior is quadratic
# increase int by 10, increase bnd by 3.5 

NB_INNER_BOUNDARY = 94
NB_OUTER_BOUNDARY = 181
# total number of interior nodes
NB_INTERIOR  = 3500
#NB_INTERIOR  = 2725

NB_CVT_SAMPLES = 80000

STENCIL_SIZE = 10

NB_CVT_ITERATIONS = 100

# Epsilon for the Radial Basis Functions
EPSILON = 3.5 #3.1
# if 0 then use variable epsilon, else use provided epsilon above
USE_SPECIFIED_EPSILON=0

# alpha = 1, beta = 2 => 1 / h^2
# alpha / h^{beta}
EPSILON_ALPHA = 1
EPSILON_BETA = 2

###############
# SWITCHES
###############
# 0 = Dirichlet; 1 = Neumann; 2 = Robin
BOUNDARY_CONDITION = 0

###############
# BOOLEANS
###############

# Disable non-uniform diffusivity
USE_UNIFORM_DIFFUSIVITY = 1

# (0:FALSE; 1:TRUE) Compute a discrete approximation for RHS values for the Discrete Compat. Condition
USE_DISCRETE_RHS = 0

# (0:FALSE; 1:TRUE) Disable the solution constraint on Neumann and Robin boundary conditions
DISABLE_SOL_CONSTRAINT = 0

# (0:FALSE; 1:TRUE) Should we enforce symmetric stencils by removing unsymmetric edges in the node graph? 
FORCE_SYMMETRIC_STENCILS = 1

# (0:FALSE; 1:TRUE) Should we run the extensive derivative tests on the weights to check precision? 
RUN_DERIVATIVE_TESTS = 1

TEST_DIRICHLET_LOCKDOWN = 0

# Should we solve A x = b where A=L+L' (symmetric weighting?)
CHECK_L_PLUS_L_TRANSPOSE = 0

# (0:FALSE; 1:TRUE) Enable/disable debugging prints
DEBUG_MODE = 0
