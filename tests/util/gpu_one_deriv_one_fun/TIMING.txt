100x100x100, stencil:32, Random

I just realized: as I increase number of derivatives I am computing, cache
becomes scarcer.

4 derivatives of 1 function :   avg:   344.3620  |  tot:   200
4 derivatives of 2 functions:   avg:   344.3620  |  tot:   250
4 derivatives of 3 functions:   avg:   344.3620  |  tot:   344.3620 (speedup: 2)
4 derivatives of 4 functions:   avg:   391.3620   (factor 2 speedup over 4 derivatives of 1 function)
----------------------------------------------------------------------
I believe I can get additional speedup using double4. The key is returning data to regular memory. 

Another issue: what is the effect of compacting the data on the subsequent solution update. 
One must consider the cost of converting from one format to another. 

Using temporaries for weights did not change timings. 
----------------------------------------------------------------------
Using stencil:64, Random: program crashed. WHY? 
  Guess: allocating too much memory at once. 
  stencil: 64*10^6 = 64 million, perhaps *4 = 256 millon bytes (senticl indices
Using stencil:32, Random: 375ms
Using stencil:32, Compact: 240ms
----------------------------------------------------------------------
100x50x50, 
Using stencil:64, ST_RANDOM, 132ms (4 functions, 4 derivatives)
Using stencil:32, ST_RANDOM, 67ms (4 functions, 4 derivatives) (2x slower as expected)
Using stencil:16, ST_RANDOM, 35ms (4 functions, 4 derivatives) (2x slower as expected)
Using stencil: 8, ST_RANDOM, 20ms (4 functions, 4 derivatives) (2x slower as expected)
(linear scaling, when computing x,y,z,l derivatives of u,v,w,p
----------------------------------------------------------------------
Using floats instead of doubles: 
Using stencil: 8, ST_RANDOM, 20ms (4 functions, 4 derivatives) (2x slower as expected)
Using stencil: 64, ST_RANDOM, 125ms (4 functions, 4 derivatives) (2x slower as expected)
(stick with floats; more predictable and flexible.)
----------------------------------------------------------------------
No effect of worksize. One thread per stencil. 
Using stencil:64  tot:   127.1530ms, 32 items per workgroup. 
Using stencil:64  tot:   130.1530ms, 64 items per workgroup. 
Using stencil:64  tot:   134.1530ms, 128 items per workgroup. 

Using stencil:16  tot:   36.0ms, 8 items per workgroup. 
Using stencil:16  tot:   32.5ms, 32 items per workgroup. 
Using stencil:16  tot:   33ms, 64 items per workgroup. 
Using stencil:16  tot:   34.0ms, 128 items per workgroup. 

Nb items per workgroup is not affecting much. 8 items per workgroup is bad,
but the code is so inefficient, that this is not seen. 
----------------------------------------------------------------------
stencil: 32, RANDOM, 250,000 pts
GPU: 53.4420ms (no weights in derivative calculations) 
GPU: 80.4420ms (include weights in derv calculation)
(not much difference. Not enough to justify 2 kernels)
----------------------------------------------------------------------
