//helper:
void helper_float_parallel_reduction( __local float * tmp_buffer )
{
  for (unsigned int stride = get_global_size(0)/2; stride > 0; stride /= 2)
  {
    barrier(CLK_LOCAL_MEM_FENCE);
    if (get_global_id(0) < stride)
      tmp_buffer[get_global_id(0)] += tmp_buffer[get_global_id(0)+stride];
  }
};


/////////////////////////// MATRIX OPERATIONS ///////////////////////////////


__kernel void float_packed_sparse_matrix_vector_mul_align1(
          unsigned int elements_per_row,
          __global const unsigned int * row_element_count,
          __global const uint * column_indices, 
          __global const float * elements,
          __global const float * vector,  
          __global float * result,
          unsigned int size)
{
  unsigned int row = get_global_id(0);
  __global const float * cur_row_elements = elements + row*elements_per_row;
  __global const uint * cur_row_column_indices = column_indices + row*elements_per_row;
  for (; row < size; row += get_global_size(0))
  {
    cur_row_elements = elements + row*elements_per_row;
    cur_row_column_indices = column_indices + row*elements_per_row;

    float dot_prod = 0.0f;
    for (unsigned int i = 0; i < row_element_count[row]; ++i)
      dot_prod += cur_row_elements[i] * vector[cur_row_column_indices[i]];
    result[row] = dot_prod;
  }
};

//
//__kernel void float_packed_sparse_matrix_vector_mul_align4(
//          unsigned int elements_per_row,
//          __global const unsigned int * row_element_count,
//          __global const uint * column_indices, 
//          __global const float * elements,
//          __global const float * vector,  
//          __global float * result,
//          unsigned int size)
//{
//  unsigned int row = get_global_id(0);
//  __global const float * cur_row_elements = elements + row*elements_per_row*4;
//  __global const uint * cur_row_column_indices = column_indices + row*elements_per_row*4;
//  for (; row < size; row += get_global_size(0))
//  {
//    cur_row_elements = elements + row*elements_per_row*4;
//    cur_row_column_indices = column_indices + row*elements_per_row*4;
//
//    float dot_prod = 0.0f;
//    for (unsigned int i = 0; i < row_element_count[row]*4; ++i)
//      dot_prod += cur_row_elements[i] * vector[cur_row_column_indices[i]];
//    result[row] = dot_prod;
//  }
//};


__kernel void float_packed_sparse_matrix_vector_mul_align4(
          unsigned int elements_per_row,
          __global const unsigned int * row_element_count,
          __global const uint4 * column_indices, 
          __global const float4 * elements,
          __global const float * vector,  
          __global float * result,
          unsigned int size)
{ 
  unsigned int row = get_global_id(0);
  __global const float4 * cur_row_elements = elements + row*elements_per_row;
  __global const uint4 * cur_row_column_indices = column_indices + row*elements_per_row;
  for (; row < size; row += get_global_size(0))
  {
    cur_row_elements = elements + row*elements_per_row;
    cur_row_column_indices = column_indices + row*elements_per_row;

    float dot_prod = 0.0f;
    for (unsigned int i = 0; i < row_element_count[row]; ++i)
    {
      float4 tmp0;
      float4 tmp1 = cur_row_elements[i];
      uint4 ind0 = cur_row_column_indices[i];

      tmp0.x = vector[ind0.x];
      tmp0.y = vector[ind0.y];
      tmp0.z = vector[ind0.z];
      tmp0.w = vector[ind0.w];
      
      dot_prod += dot(tmp0, tmp1);
    }
    result[row] = dot_prod;
  }
};

__kernel void float_packed_sparse_matrix_vector_mul_align8(
          unsigned int elements_per_row,
          __global const unsigned int * row_element_count,
          __global const uint8 * column_indices, 
          __global const float8 * elements,
          __global const float * vector,  
          __global float * result,
          unsigned int size)
{ 
  unsigned int row = get_global_id(0);
  __global const float8 * cur_row_elements = elements + row*elements_per_row/8;
  __global const uint8 * cur_row_column_indices = column_indices + row*elements_per_row/8;
  for (; row < size; row += get_global_size(0))
  {
    cur_row_elements = elements + row*elements_per_row/8;
    cur_row_column_indices = column_indices + row*elements_per_row/8;

    float dot_prod = 0.0f;
    for (unsigned int i = 0; i < row_element_count[row]/8; ++i)
    {
      float8 tmp0;
      float8 tmp1 = cur_row_elements[i];
      uint8 ind0 = cur_row_column_indices[i];

      tmp0.s0 = vector[ind0.s0];
      tmp0.s1 = vector[ind0.s1];
      tmp0.s2 = vector[ind0.s2];
      tmp0.s3 = vector[ind0.s3];
      tmp0.s4 = vector[ind0.s4];
      tmp0.s5 = vector[ind0.s5];
      tmp0.s6 = vector[ind0.s6];
      tmp0.s7 = vector[ind0.s7];

      dot_prod += dot(tmp0.lo, tmp1.lo);
      dot_prod += dot(tmp0.hi, tmp1.hi);

      /*float4 tmp0;
      float4 tmp1 = cur_row_elements[i];
      float4 tmp2;
      float4 tmp3 = cur_row_elements[i+1];
      uint4 ind0 = cur_row_column_indices[i];
      uint4 ind2 = cur_row_column_indices[i+1];

      tmp0.x = vector[ind0.x];
      tmp0.y = vector[ind0.y];
      tmp0.z = vector[ind0.z];
      tmp0.w = vector[ind0.w];

      tmp2.x = vector[ind2.x];
      tmp2.y = vector[ind2.y];
      tmp2.z = vector[ind2.z];
      tmp2.w = vector[ind2.w];
      
      dot_prod += dot(tmp0, tmp1);
      dot_prod += dot(tmp2, tmp3);*/
    }
    result[row] = dot_prod;
  }
};
//

//
//__kernel void float_sparse_matrix_vector_packed_mul(
//          __global const unsigned int * row_indices,
//          __global const unsigned int * column_indices, 
//          __global const float * elements,
//          __global const float * vector,  
//          __global float * result,
//          unsigned int size) 
//{ 
//  __global const float4 * vector_f4 = elements;
//  for (unsigned int row = get_global_id(0); row < size; row += get_global_size(0))
//  {
//    float dot_prod = 0.0f;
//    unsigned int start = row_indices[row];
//    unsigned int end = row_indices[row+1];
//    
//    for (unsigned int i = start/4; i < end/4; i+=2)
//    {
//      float4 tmp0;
//      float4 tmp1 = vector_f4[i];
//      float4 tmp2;
//      float4 tmp3 = vector_f4[i+1];
//      
//      tmp0.x = vector[column_indices[8*i+0]];
//      tmp0.y = vector[column_indices[8*i+1]];
//      tmp0.z = vector[column_indices[8*i+2]];
//      tmp0.w = vector[column_indices[8*i+3]];
//      
//      tmp2.x = vector[column_indices[8*i+4]];
//      tmp2.y = vector[column_indices[8*i+5]];
//      tmp2.z = vector[column_indices[8*i+6]];
//      tmp2.w = vector[column_indices[8*i+7]];
//      
//      dot_prod += dot(tmp0, tmp1);
//      dot_prod += dot(tmp2, tmp3);
//    }
//    
//    result[row] = dot_prod;
//  }
//};
//
//float float_vector_inner_prod_impl(
//          __global const float * vec1,
//          __global const float * vec2,
//          unsigned int size,
//          __local float * tmp_buffer)
//{
//  float tmp = 0;
//  for (unsigned int i = get_global_id(0); i < size; i += get_global_size(0))
//    tmp += vec1[i]*vec2[i];
//  tmp_buffer[get_global_id(0)] = tmp;
//  
//  for (unsigned int stride = get_global_size(0)/2; stride > 0; stride /= 2)
//  {
//    barrier(CLK_LOCAL_MEM_FENCE);
//    if (get_global_id(0) < stride)
//      tmp_buffer[get_global_id(0)] += tmp_buffer[get_global_id(0)+stride];
//  }
//  
//  return tmp_buffer[0];
//}




