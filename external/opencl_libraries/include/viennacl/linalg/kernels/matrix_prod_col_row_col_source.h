#ifndef VIENNACL_LINALG_KERNELS_MATRIX_PROD_COL_ROW_COL_SOURCE_HPP_
#define VIENNACL_LINALG_KERNELS_MATRIX_PROD_COL_ROW_COL_SOURCE_HPP_
//Automatically generated file from auxiliary-directory, do not edit manually!
/** @file matrix_prod_col_row_col_source.h
 *  @brief OpenCL kernel source file, generated automatically from scripts in auxiliary/. */
namespace viennacl
{
 namespace linalg
 {
  namespace kernels
  {
const char * const matrix_prod_col_row_col_align1_prod_TA = 
"// file automatically generated - do not edit!\n"
"// matrix-matrix multiplication C = A^T * B\n"
"// matrix layouts: C...col_major, A...col_major, B...row_major\n"
"__kernel void prod_TA(\n"
"          float alpha,\n"
"          __global const float * A,\n"
"          unsigned int A_row_start,\n"
"          unsigned int A_col_start,\n"
"          unsigned int A_row_inc,\n"
"          unsigned int A_col_inc,\n"
"          unsigned int A_row_size,\n"
"          unsigned int A_col_size,\n"
"          unsigned int A_internal_rows,\n"
"          unsigned int A_internal_cols,\n"
"          __global const float * B,  \n"
"          unsigned int B_row_start,\n"
"          unsigned int B_col_start,\n"
"          unsigned int B_row_inc,\n"
"          unsigned int B_col_inc,\n"
"          unsigned int B_row_size,\n"
"          unsigned int B_col_size,\n"
"          unsigned int B_internal_rows,\n"
"          unsigned int B_internal_cols,\n"
"          float beta,\n"
"          __global float * C,\n"
"          unsigned int C_row_start,\n"
"          unsigned int C_col_start,\n"
"          unsigned int C_row_inc,\n"
"          unsigned int C_col_inc,\n"
"          unsigned int C_row_size,\n"
"          unsigned int C_col_size,\n"
"          unsigned int C_internal_rows,\n"
"          unsigned int C_internal_cols) \n"
"{ \n"
"  __local float bufA[272];\n"
"  __local float bufB[272];\n"
"  size_t block_size = 16;//get_local_size(0);\n"
"  size_t row_block_id = get_group_id(0);\n"
"  size_t col_block_id = get_group_id(1);\n"
"  size_t row_thread_id = get_local_id(0);\n"
"  size_t col_thread_id = get_local_id(1);\n"
"  size_t aBegin = (row_block_id * block_size * A_col_inc + A_col_start) * A_internal_rows + A_row_start;\n"
"  size_t aStep = block_size * A_row_inc;\n"
"  size_t bBegin = (col_block_id * block_size * B_col_inc + B_col_start) + B_row_start * B_internal_cols;\n"
"  size_t bStep = block_size * B_internal_cols * B_row_inc;\n"
"  size_t block_num = (A_row_size + block_size - 1) / block_size;\n"
"  float Csub = 0;\n"
"  size_t aOffset = row_thread_id * A_row_inc + col_thread_id * A_col_inc * A_internal_rows;\n"
"  size_t bOffset = row_thread_id * B_col_inc + col_thread_id * B_row_inc * B_internal_cols;\n"
"  size_t row_thread_id_times_block_size = row_thread_id * (block_size + 1);\n"
"  size_t col_thread_id_times_block_size = col_thread_id * (block_size + 1);\n"
"  for (size_t block = 0;\n"
"           block < block_num;\n"
"           ++block)\n"
"  {\n"
"    bufA[col_thread_id_times_block_size + row_thread_id] = ((block * block_size + row_thread_id < A_row_size) && (row_block_id * block_size + col_thread_id < A_col_size)) ? A[aBegin + aOffset] : 0;\n"
"    bufB[row_thread_id_times_block_size + col_thread_id] = ((block * block_size + col_thread_id < B_row_size) && (col_block_id * block_size + row_thread_id < B_col_size)) ? B[bBegin + bOffset] : 0;\n"
"    barrier(CLK_LOCAL_MEM_FENCE);\n"
"    __local float * bufAptr = bufA + row_thread_id_times_block_size;\n"
"    __local float * bufBptr = bufB + col_thread_id_times_block_size;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"    barrier(CLK_LOCAL_MEM_FENCE);\n"
"    aBegin += aStep;\n"
"    bBegin += bStep;\n"
"  }\n"
"  if (get_global_id(0) < A_col_size && get_global_id(1) < B_col_size)\n"
"    C[get_global_id(0) * C_row_inc + C_row_start + (get_global_id(1) * C_col_inc + C_col_start) * C_internal_rows] = (beta == 0) ? alpha * Csub : alpha * Csub + beta * C[get_global_id(0) * C_row_inc + C_row_start + (get_global_id(1) * C_col_inc + C_col_start) * C_internal_rows];\n"
"}\n"
; //matrix_prod_col_row_col_align1_prod_TA

const char * const matrix_prod_col_row_col_align1_prod_AT = 
"// file automatically generated - do not edit!\n"
"// matrix-matrix multiplication C = A * B^T\n"
"// matrix layouts: C...col_major, A...col_major, B...row_major\n"
"__kernel void prod_AT(\n"
"          float alpha,\n"
"          __global const float * A,\n"
"          unsigned int A_row_start,\n"
"          unsigned int A_col_start,\n"
"          unsigned int A_row_inc,\n"
"          unsigned int A_col_inc,\n"
"          unsigned int A_row_size,\n"
"          unsigned int A_col_size,\n"
"          unsigned int A_internal_rows,\n"
"          unsigned int A_internal_cols,\n"
"          __global const float * B,  \n"
"          unsigned int B_row_start,\n"
"          unsigned int B_col_start,\n"
"          unsigned int B_row_inc,\n"
"          unsigned int B_col_inc,\n"
"          unsigned int B_row_size,\n"
"          unsigned int B_col_size,\n"
"          unsigned int B_internal_rows,\n"
"          unsigned int B_internal_cols,\n"
"          float beta,\n"
"          __global float * C,\n"
"          unsigned int C_row_start,\n"
"          unsigned int C_col_start,\n"
"          unsigned int C_row_inc,\n"
"          unsigned int C_col_inc,\n"
"          unsigned int C_row_size,\n"
"          unsigned int C_col_size,\n"
"          unsigned int C_internal_rows,\n"
"          unsigned int C_internal_cols) \n"
"{ \n"
"  __local float bufA[272];\n"
"  __local float bufB[272];\n"
"  size_t block_size = 16;//get_local_size(0);\n"
"  size_t row_block_id = get_group_id(0);\n"
"  size_t col_block_id = get_group_id(1);\n"
"  size_t row_thread_id = get_local_id(0);\n"
"  size_t col_thread_id = get_local_id(1);\n"
"  size_t aBegin = (row_block_id * block_size * A_row_inc + A_row_start) + A_col_start * A_internal_rows;\n"
"  size_t aStep = block_size * A_col_inc * A_internal_rows;\n"
"  size_t bBegin = (col_block_id * block_size * B_row_inc + B_row_start) * B_internal_cols + B_col_start;\n"
"  size_t bStep = block_size * B_col_inc;\n"
"  size_t block_num = (A_col_size + block_size - 1) / block_size;\n"
"  float Csub = 0;\n"
"  size_t aOffset = row_thread_id * A_row_inc + col_thread_id * A_col_inc * A_internal_rows;\n"
"  size_t bOffset = row_thread_id * B_col_inc + col_thread_id * B_row_inc * B_internal_cols;\n"
"  size_t row_thread_id_times_block_size = row_thread_id * (block_size + 1);\n"
"  size_t col_thread_id_times_block_size = col_thread_id * (block_size + 1);\n"
"  for (size_t block = 0;\n"
"           block < block_num;\n"
"           ++block)\n"
"  {\n"
"    bufA[row_thread_id_times_block_size + col_thread_id] = ((block * block_size + col_thread_id < A_col_size) && (row_block_id * block_size + row_thread_id < A_row_size)) ? A[aBegin + aOffset] : 0;\n"
"    bufB[col_thread_id_times_block_size + row_thread_id] = ((block * block_size + row_thread_id < B_col_size) && (col_block_id * block_size + col_thread_id < B_row_size)) ? B[bBegin + bOffset] : 0;\n"
"    barrier(CLK_LOCAL_MEM_FENCE);\n"
"    __local float * bufAptr = bufA + row_thread_id_times_block_size;\n"
"    __local float * bufBptr = bufB + col_thread_id_times_block_size;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"    barrier(CLK_LOCAL_MEM_FENCE);\n"
"    aBegin += aStep;\n"
"    bBegin += bStep;\n"
"  }\n"
"  if (get_global_id(0) < A_row_size && get_global_id(1) < B_row_size)\n"
"    C[get_global_id(0) * C_row_inc + C_row_start + (get_global_id(1) * C_col_inc + C_col_start) * C_internal_rows] = (beta == 0) ? alpha * Csub : alpha * Csub + beta * C[get_global_id(0) * C_row_inc + C_row_start + (get_global_id(1) * C_col_inc + C_col_start) * C_internal_rows];\n"
"}\n"
; //matrix_prod_col_row_col_align1_prod_AT

const char * const matrix_prod_col_row_col_align1_prod_TT_amd = 
"__kernel void prod_TT_amd( float alpha\n"
", __global float4* lhs, unsigned int lhs_offset1, unsigned int lhs_offset2, unsigned int lhs_stride1, unsigned int lhs_stride2, unsigned int lhs_size1, unsigned int lhs_size2, unsigned int lhs_internal_size1, unsigned int lhs_internal_size2\n"
", __global float4* rhs, unsigned int rhs_offset1, unsigned int rhs_offset2, unsigned int rhs_stride1, unsigned int rhs_stride2, unsigned int rhs_size1, unsigned int rhs_size2, unsigned int rhs_internal_size1, unsigned int rhs_internal_size2\n"
",float beta\n"
", __global float4* res, unsigned int res_offset1, unsigned int res_offset2, unsigned int res_stride1, unsigned int res_stride2, unsigned int res_size1, unsigned int res_size2, unsigned int res_internal_size1, unsigned int res_internal_size2)\n"
"{\n"
"	float4 res00 = (float4)(0) ;\n"
"	float4 res01 = (float4)(0) ;\n"
"	float4 res02 = (float4)(0) ;\n"
"	float4 res03 = (float4)(0) ;\n"
"	__local float local_lhs[2112];\n"
"	lhs_internal_size1/=4;\n"
"	rhs_internal_size2/=4;\n"
"	res_internal_size1/=4;\n"
"	unsigned int block_num = lhs_internal_size1/16;\n"
"	__global float4* res_ptr = res + (get_global_id(0)*1)+ (get_global_id(1)*4)*res_internal_size1;\n"
"	__global float4 * rhs_ptr_0 = rhs + (0 + get_local_id(1)*4 +  get_group_id(1)*128)*rhs_internal_size2+ (0);\n"
"	__global float4 * rhs_ptr_1 = rhs + (1 + get_local_id(1)*4 +  get_group_id(1)*128)*rhs_internal_size2+ (0);\n"
"	__global float4 * rhs_ptr_2 = rhs + (2 + get_local_id(1)*4 +  get_group_id(1)*128)*rhs_internal_size2+ (0);\n"
"	__global float4 * rhs_ptr_3 = rhs + (3 + get_local_id(1)*4 +  get_group_id(1)*128)*rhs_internal_size2+ (0);\n"
"	unsigned int offsetLHS = (0)+ (get_group_id(0)*32)*lhs_internal_size1;\n"
"	for(unsigned int bl=0 ; bl<block_num ; ++bl){\n"
"		barrier(CLK_LOCAL_MEM_FENCE);\n"
"		for(unsigned int i = get_local_id(0) ; i < 16; i+= get_local_size(0)){\n"
"			for(unsigned int j = get_local_id(1) ; j < 32; j+= get_local_size(1)){\n"
"				float4 val = lhs[offsetLHS+ j*lhs_internal_size1 + i];\n"
"				__local float* ptr = local_lhs + i*132+ j;\n"
"				*ptr =  val.s0;\n"
"				ptr += 33;\n"
"				*ptr =  val.s1;\n"
"				ptr += 33;\n"
"				*ptr =  val.s2;\n"
"				ptr += 33;\n"
"				*ptr =  val.s3;\n"
"				ptr += 33;\n"
"			}\n"
"		}\n"
"		barrier(CLK_LOCAL_MEM_FENCE);\n"
"		__local float* ptr_lhs_0 = local_lhs + 0 + get_local_id(0)*4;\n"
"		__local float* ptr_lhs_1 = local_lhs + 33 + get_local_id(0)*4;\n"
"		__local float* ptr_lhs_2 = local_lhs + 66 + get_local_id(0)*4;\n"
"		__local float* ptr_lhs_3 = local_lhs + 99 + get_local_id(0)*4;\n"
"		__local float* ptr_lhs_4 = local_lhs + 132 + get_local_id(0)*4;\n"
"		__local float* ptr_lhs_5 = local_lhs + 165 + get_local_id(0)*4;\n"
"		__local float* ptr_lhs_6 = local_lhs + 198 + get_local_id(0)*4;\n"
"		__local float* ptr_lhs_7 = local_lhs + 231 + get_local_id(0)*4;\n"
"		 for(unsigned int bs=0 ; bs < 8 ; ++bs){\n"
"			float4 val_rhs_0_0 = *rhs_ptr_0;++rhs_ptr_0;\n"
"			float4 val_rhs_0_1 = *rhs_ptr_0;++rhs_ptr_0;\n"
"			float4 val_rhs_1_0 = *rhs_ptr_1;++rhs_ptr_1;\n"
"			float4 val_rhs_1_1 = *rhs_ptr_1;++rhs_ptr_1;\n"
"			float4 val_rhs_2_0 = *rhs_ptr_2;++rhs_ptr_2;\n"
"			float4 val_rhs_2_1 = *rhs_ptr_2;++rhs_ptr_2;\n"
"			float4 val_rhs_3_0 = *rhs_ptr_3;++rhs_ptr_3;\n"
"			float4 val_rhs_3_1 = *rhs_ptr_3;++rhs_ptr_3;\n"
"			float val_lhs_0_0 = * ptr_lhs_0++;\n"
"			float val_lhs_1_0 = * ptr_lhs_1++;\n"
"			float val_lhs_2_0 = * ptr_lhs_2++;\n"
"			float val_lhs_3_0 = * ptr_lhs_3++;\n"
"			float val_lhs_4_0 = * ptr_lhs_4++;\n"
"			float val_lhs_5_0 = * ptr_lhs_5++;\n"
"			float val_lhs_6_0 = * ptr_lhs_6++;\n"
"			float val_lhs_7_0 = * ptr_lhs_7++;\n"
"			float val_lhs_0_1 = * ptr_lhs_0++;\n"
"			float val_lhs_1_1 = * ptr_lhs_1++;\n"
"			float val_lhs_2_1 = * ptr_lhs_2++;\n"
"			float val_lhs_3_1 = * ptr_lhs_3++;\n"
"			float val_lhs_4_1 = * ptr_lhs_4++;\n"
"			float val_lhs_5_1 = * ptr_lhs_5++;\n"
"			float val_lhs_6_1 = * ptr_lhs_6++;\n"
"			float val_lhs_7_1 = * ptr_lhs_7++;\n"
"			float val_lhs_0_2 = * ptr_lhs_0++;\n"
"			float val_lhs_1_2 = * ptr_lhs_1++;\n"
"			float val_lhs_2_2 = * ptr_lhs_2++;\n"
"			float val_lhs_3_2 = * ptr_lhs_3++;\n"
"			float val_lhs_4_2 = * ptr_lhs_4++;\n"
"			float val_lhs_5_2 = * ptr_lhs_5++;\n"
"			float val_lhs_6_2 = * ptr_lhs_6++;\n"
"			float val_lhs_7_2 = * ptr_lhs_7++;\n"
"			float val_lhs_0_3 = * ptr_lhs_0++;\n"
"			float val_lhs_1_3 = * ptr_lhs_1++;\n"
"			float val_lhs_2_3 = * ptr_lhs_2++;\n"
"			float val_lhs_3_3 = * ptr_lhs_3++;\n"
"			float val_lhs_4_3 = * ptr_lhs_4++;\n"
"			float val_lhs_5_3 = * ptr_lhs_5++;\n"
"			float val_lhs_6_3 = * ptr_lhs_6++;\n"
"			float val_lhs_7_3 = * ptr_lhs_7++;\n"
"			res00.s0+=val_lhs_0_0*val_rhs_0_0.s0;\n"
"			res00.s1+=val_lhs_0_1*val_rhs_0_0.s0;\n"
"			res00.s2+=val_lhs_0_2*val_rhs_0_0.s0;\n"
"			res00.s3+=val_lhs_0_3*val_rhs_0_0.s0;\n"
"			res01.s0+=val_lhs_0_0*val_rhs_1_0.s0;\n"
"			res01.s1+=val_lhs_0_1*val_rhs_1_0.s0;\n"
"			res01.s2+=val_lhs_0_2*val_rhs_1_0.s0;\n"
"			res01.s3+=val_lhs_0_3*val_rhs_1_0.s0;\n"
"			res02.s0+=val_lhs_0_0*val_rhs_2_0.s0;\n"
"			res02.s1+=val_lhs_0_1*val_rhs_2_0.s0;\n"
"			res02.s2+=val_lhs_0_2*val_rhs_2_0.s0;\n"
"			res02.s3+=val_lhs_0_3*val_rhs_2_0.s0;\n"
"			res03.s0+=val_lhs_0_0*val_rhs_3_0.s0;\n"
"			res03.s1+=val_lhs_0_1*val_rhs_3_0.s0;\n"
"			res03.s2+=val_lhs_0_2*val_rhs_3_0.s0;\n"
"			res03.s3+=val_lhs_0_3*val_rhs_3_0.s0;\n"
"			res00.s0+=val_lhs_1_0*val_rhs_0_0.s1;\n"
"			res00.s1+=val_lhs_1_1*val_rhs_0_0.s1;\n"
"			res00.s2+=val_lhs_1_2*val_rhs_0_0.s1;\n"
"			res00.s3+=val_lhs_1_3*val_rhs_0_0.s1;\n"
"			res01.s0+=val_lhs_1_0*val_rhs_1_0.s1;\n"
"			res01.s1+=val_lhs_1_1*val_rhs_1_0.s1;\n"
"			res01.s2+=val_lhs_1_2*val_rhs_1_0.s1;\n"
"			res01.s3+=val_lhs_1_3*val_rhs_1_0.s1;\n"
"			res02.s0+=val_lhs_1_0*val_rhs_2_0.s1;\n"
"			res02.s1+=val_lhs_1_1*val_rhs_2_0.s1;\n"
"			res02.s2+=val_lhs_1_2*val_rhs_2_0.s1;\n"
"			res02.s3+=val_lhs_1_3*val_rhs_2_0.s1;\n"
"			res03.s0+=val_lhs_1_0*val_rhs_3_0.s1;\n"
"			res03.s1+=val_lhs_1_1*val_rhs_3_0.s1;\n"
"			res03.s2+=val_lhs_1_2*val_rhs_3_0.s1;\n"
"			res03.s3+=val_lhs_1_3*val_rhs_3_0.s1;\n"
"			res00.s0+=val_lhs_2_0*val_rhs_0_0.s2;\n"
"			res00.s1+=val_lhs_2_1*val_rhs_0_0.s2;\n"
"			res00.s2+=val_lhs_2_2*val_rhs_0_0.s2;\n"
"			res00.s3+=val_lhs_2_3*val_rhs_0_0.s2;\n"
"			res01.s0+=val_lhs_2_0*val_rhs_1_0.s2;\n"
"			res01.s1+=val_lhs_2_1*val_rhs_1_0.s2;\n"
"			res01.s2+=val_lhs_2_2*val_rhs_1_0.s2;\n"
"			res01.s3+=val_lhs_2_3*val_rhs_1_0.s2;\n"
"			res02.s0+=val_lhs_2_0*val_rhs_2_0.s2;\n"
"			res02.s1+=val_lhs_2_1*val_rhs_2_0.s2;\n"
"			res02.s2+=val_lhs_2_2*val_rhs_2_0.s2;\n"
"			res02.s3+=val_lhs_2_3*val_rhs_2_0.s2;\n"
"			res03.s0+=val_lhs_2_0*val_rhs_3_0.s2;\n"
"			res03.s1+=val_lhs_2_1*val_rhs_3_0.s2;\n"
"			res03.s2+=val_lhs_2_2*val_rhs_3_0.s2;\n"
"			res03.s3+=val_lhs_2_3*val_rhs_3_0.s2;\n"
"			res00.s0+=val_lhs_3_0*val_rhs_0_0.s3;\n"
"			res00.s1+=val_lhs_3_1*val_rhs_0_0.s3;\n"
"			res00.s2+=val_lhs_3_2*val_rhs_0_0.s3;\n"
"			res00.s3+=val_lhs_3_3*val_rhs_0_0.s3;\n"
"			res01.s0+=val_lhs_3_0*val_rhs_1_0.s3;\n"
"			res01.s1+=val_lhs_3_1*val_rhs_1_0.s3;\n"
"			res01.s2+=val_lhs_3_2*val_rhs_1_0.s3;\n"
"			res01.s3+=val_lhs_3_3*val_rhs_1_0.s3;\n"
"			res02.s0+=val_lhs_3_0*val_rhs_2_0.s3;\n"
"			res02.s1+=val_lhs_3_1*val_rhs_2_0.s3;\n"
"			res02.s2+=val_lhs_3_2*val_rhs_2_0.s3;\n"
"			res02.s3+=val_lhs_3_3*val_rhs_2_0.s3;\n"
"			res03.s0+=val_lhs_3_0*val_rhs_3_0.s3;\n"
"			res03.s1+=val_lhs_3_1*val_rhs_3_0.s3;\n"
"			res03.s2+=val_lhs_3_2*val_rhs_3_0.s3;\n"
"			res03.s3+=val_lhs_3_3*val_rhs_3_0.s3;\n"
"			res00.s0+=val_lhs_4_0*val_rhs_0_1.s0;\n"
"			res00.s1+=val_lhs_4_1*val_rhs_0_1.s0;\n"
"			res00.s2+=val_lhs_4_2*val_rhs_0_1.s0;\n"
"			res00.s3+=val_lhs_4_3*val_rhs_0_1.s0;\n"
"			res01.s0+=val_lhs_4_0*val_rhs_1_1.s0;\n"
"			res01.s1+=val_lhs_4_1*val_rhs_1_1.s0;\n"
"			res01.s2+=val_lhs_4_2*val_rhs_1_1.s0;\n"
"			res01.s3+=val_lhs_4_3*val_rhs_1_1.s0;\n"
"			res02.s0+=val_lhs_4_0*val_rhs_2_1.s0;\n"
"			res02.s1+=val_lhs_4_1*val_rhs_2_1.s0;\n"
"			res02.s2+=val_lhs_4_2*val_rhs_2_1.s0;\n"
"			res02.s3+=val_lhs_4_3*val_rhs_2_1.s0;\n"
"			res03.s0+=val_lhs_4_0*val_rhs_3_1.s0;\n"
"			res03.s1+=val_lhs_4_1*val_rhs_3_1.s0;\n"
"			res03.s2+=val_lhs_4_2*val_rhs_3_1.s0;\n"
"			res03.s3+=val_lhs_4_3*val_rhs_3_1.s0;\n"
"			res00.s0+=val_lhs_5_0*val_rhs_0_1.s1;\n"
"			res00.s1+=val_lhs_5_1*val_rhs_0_1.s1;\n"
"			res00.s2+=val_lhs_5_2*val_rhs_0_1.s1;\n"
"			res00.s3+=val_lhs_5_3*val_rhs_0_1.s1;\n"
"			res01.s0+=val_lhs_5_0*val_rhs_1_1.s1;\n"
"			res01.s1+=val_lhs_5_1*val_rhs_1_1.s1;\n"
"			res01.s2+=val_lhs_5_2*val_rhs_1_1.s1;\n"
"			res01.s3+=val_lhs_5_3*val_rhs_1_1.s1;\n"
"			res02.s0+=val_lhs_5_0*val_rhs_2_1.s1;\n"
"			res02.s1+=val_lhs_5_1*val_rhs_2_1.s1;\n"
"			res02.s2+=val_lhs_5_2*val_rhs_2_1.s1;\n"
"			res02.s3+=val_lhs_5_3*val_rhs_2_1.s1;\n"
"			res03.s0+=val_lhs_5_0*val_rhs_3_1.s1;\n"
"			res03.s1+=val_lhs_5_1*val_rhs_3_1.s1;\n"
"			res03.s2+=val_lhs_5_2*val_rhs_3_1.s1;\n"
"			res03.s3+=val_lhs_5_3*val_rhs_3_1.s1;\n"
"			res00.s0+=val_lhs_6_0*val_rhs_0_1.s2;\n"
"			res00.s1+=val_lhs_6_1*val_rhs_0_1.s2;\n"
"			res00.s2+=val_lhs_6_2*val_rhs_0_1.s2;\n"
"			res00.s3+=val_lhs_6_3*val_rhs_0_1.s2;\n"
"			res01.s0+=val_lhs_6_0*val_rhs_1_1.s2;\n"
"			res01.s1+=val_lhs_6_1*val_rhs_1_1.s2;\n"
"			res01.s2+=val_lhs_6_2*val_rhs_1_1.s2;\n"
"			res01.s3+=val_lhs_6_3*val_rhs_1_1.s2;\n"
"			res02.s0+=val_lhs_6_0*val_rhs_2_1.s2;\n"
"			res02.s1+=val_lhs_6_1*val_rhs_2_1.s2;\n"
"			res02.s2+=val_lhs_6_2*val_rhs_2_1.s2;\n"
"			res02.s3+=val_lhs_6_3*val_rhs_2_1.s2;\n"
"			res03.s0+=val_lhs_6_0*val_rhs_3_1.s2;\n"
"			res03.s1+=val_lhs_6_1*val_rhs_3_1.s2;\n"
"			res03.s2+=val_lhs_6_2*val_rhs_3_1.s2;\n"
"			res03.s3+=val_lhs_6_3*val_rhs_3_1.s2;\n"
"			res00.s0+=val_lhs_7_0*val_rhs_0_1.s3;\n"
"			res00.s1+=val_lhs_7_1*val_rhs_0_1.s3;\n"
"			res00.s2+=val_lhs_7_2*val_rhs_0_1.s3;\n"
"			res00.s3+=val_lhs_7_3*val_rhs_0_1.s3;\n"
"			res01.s0+=val_lhs_7_0*val_rhs_1_1.s3;\n"
"			res01.s1+=val_lhs_7_1*val_rhs_1_1.s3;\n"
"			res01.s2+=val_lhs_7_2*val_rhs_1_1.s3;\n"
"			res01.s3+=val_lhs_7_3*val_rhs_1_1.s3;\n"
"			res02.s0+=val_lhs_7_0*val_rhs_2_1.s3;\n"
"			res02.s1+=val_lhs_7_1*val_rhs_2_1.s3;\n"
"			res02.s2+=val_lhs_7_2*val_rhs_2_1.s3;\n"
"			res02.s3+=val_lhs_7_3*val_rhs_2_1.s3;\n"
"			res03.s0+=val_lhs_7_0*val_rhs_3_1.s3;\n"
"			res03.s1+=val_lhs_7_1*val_rhs_3_1.s3;\n"
"			res03.s2+=val_lhs_7_2*val_rhs_3_1.s3;\n"
"			res03.s3+=val_lhs_7_3*val_rhs_3_1.s3;\n"
"			ptr_lhs_0 += 260;\n"
"			ptr_lhs_1 += 260;\n"
"			ptr_lhs_2 += 260;\n"
"			ptr_lhs_3 += 260;\n"
"			ptr_lhs_4 += 260;\n"
"			ptr_lhs_5 += 260;\n"
"			ptr_lhs_6 += 260;\n"
"			ptr_lhs_7 += 260;\n"
"		}\n"
"		offsetLHS += 16;\n"
"	}\n"
"	*res_ptr = (beta != 0) ? alpha*res00 + beta * *res_ptr : alpha*res00;\n"
"	res_ptr++;\n"
"	res_ptr+=res_internal_size1 - 1;\n"
"	*res_ptr = (beta != 0) ? alpha*res01 + beta * *res_ptr : alpha*res01;\n"
"	res_ptr++;\n"
"	res_ptr+=res_internal_size1 - 1;\n"
"	*res_ptr = (beta != 0) ? alpha*res02 + beta * *res_ptr : alpha*res02;\n"
"	res_ptr++;\n"
"	res_ptr+=res_internal_size1 - 1;\n"
"	*res_ptr = (beta != 0) ? alpha*res03 + beta * *res_ptr : alpha*res03;\n"
"	res_ptr++;\n"
"}\n"
; //matrix_prod_col_row_col_align1_prod_TT_amd

const char * const matrix_prod_col_row_col_align1_prod_TA_amd = 
"__kernel void prod_TA_amd( float alpha\n"
", __global float4* lhs, unsigned int lhs_offset1, unsigned int lhs_offset2, unsigned int lhs_stride1, unsigned int lhs_stride2, unsigned int lhs_size1, unsigned int lhs_size2, unsigned int lhs_internal_size1, unsigned int lhs_internal_size2\n"
", __global float4* rhs, unsigned int rhs_offset1, unsigned int rhs_offset2, unsigned int rhs_stride1, unsigned int rhs_stride2, unsigned int rhs_size1, unsigned int rhs_size2, unsigned int rhs_internal_size1, unsigned int rhs_internal_size2\n"
",float beta\n"
", __global float4* res, unsigned int res_offset1, unsigned int res_offset2, unsigned int res_stride1, unsigned int res_stride2, unsigned int res_size1, unsigned int res_size2, unsigned int res_internal_size1, unsigned int res_internal_size2)\n"
"{\n"
"	float4 res00 = (float4)(0) ;\n"
"	float4 res01 = (float4)(0) ;\n"
"	float4 res02 = (float4)(0) ;\n"
"	float4 res03 = (float4)(0) ;\n"
"	__local float local_lhs[2112];\n"
"	lhs_internal_size1/=4;\n"
"	rhs_internal_size2/=4;\n"
"	res_internal_size1/=4;\n"
"	unsigned int block_num = lhs_internal_size1/16;\n"
"	__global float4* res_ptr = res + (get_global_id(0)*1)+ (get_global_id(1)*4)*res_internal_size1;\n"
"	__global float4 * rhs_ptr_0 = rhs + (0)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	__global float4 * rhs_ptr_1 = rhs + (1)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	__global float4 * rhs_ptr_2 = rhs + (2)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	__global float4 * rhs_ptr_3 = rhs + (3)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	__global float4 * rhs_ptr_4 = rhs + (4)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	__global float4 * rhs_ptr_5 = rhs + (5)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	__global float4 * rhs_ptr_6 = rhs + (6)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	__global float4 * rhs_ptr_7 = rhs + (7)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	unsigned int offsetLHS = (0)+ (get_group_id(0)*32)*lhs_internal_size1;\n"
"	for(unsigned int bl=0 ; bl<block_num ; ++bl){\n"
"		barrier(CLK_LOCAL_MEM_FENCE);\n"
"		for(unsigned int i = get_local_id(0) ; i < 16; i+= get_local_size(0)){\n"
"			for(unsigned int j = get_local_id(1) ; j < 32; j+= get_local_size(1)){\n"
"				float4 val = lhs[offsetLHS+ j*lhs_internal_size1 + i];\n"
"				__local float* ptr = local_lhs + i*132+ j;\n"
"				*ptr =  val.s0;\n"
"				ptr += 33;\n"
"				*ptr =  val.s1;\n"
"				ptr += 33;\n"
"				*ptr =  val.s2;\n"
"				ptr += 33;\n"
"				*ptr =  val.s3;\n"
"				ptr += 33;\n"
"			}\n"
"		}\n"
"		barrier(CLK_LOCAL_MEM_FENCE);\n"
"		__local float* ptr_lhs_0 = local_lhs + 0 + get_local_id(0)*4;\n"
"		__local float* ptr_lhs_1 = local_lhs + 33 + get_local_id(0)*4;\n"
"		__local float* ptr_lhs_2 = local_lhs + 66 + get_local_id(0)*4;\n"
"		__local float* ptr_lhs_3 = local_lhs + 99 + get_local_id(0)*4;\n"
"		__local float* ptr_lhs_4 = local_lhs + 132 + get_local_id(0)*4;\n"
"		__local float* ptr_lhs_5 = local_lhs + 165 + get_local_id(0)*4;\n"
"		__local float* ptr_lhs_6 = local_lhs + 198 + get_local_id(0)*4;\n"
"		__local float* ptr_lhs_7 = local_lhs + 231 + get_local_id(0)*4;\n"
"		 for(unsigned int bs=0 ; bs < 8 ; ++bs){\n"
"			float4 val_rhs_0_0 = *rhs_ptr_0;++rhs_ptr_0;\n"
"			float4 val_rhs_1_0 = *rhs_ptr_1;++rhs_ptr_1;\n"
"			float4 val_rhs_2_0 = *rhs_ptr_2;++rhs_ptr_2;\n"
"			float4 val_rhs_3_0 = *rhs_ptr_3;++rhs_ptr_3;\n"
"			float4 val_rhs_4_0 = *rhs_ptr_4;++rhs_ptr_4;\n"
"			float4 val_rhs_5_0 = *rhs_ptr_5;++rhs_ptr_5;\n"
"			float4 val_rhs_6_0 = *rhs_ptr_6;++rhs_ptr_6;\n"
"			float4 val_rhs_7_0 = *rhs_ptr_7;++rhs_ptr_7;\n"
"			float val_lhs_0_0 = * ptr_lhs_0++;\n"
"			float val_lhs_1_0 = * ptr_lhs_1++;\n"
"			float val_lhs_2_0 = * ptr_lhs_2++;\n"
"			float val_lhs_3_0 = * ptr_lhs_3++;\n"
"			float val_lhs_4_0 = * ptr_lhs_4++;\n"
"			float val_lhs_5_0 = * ptr_lhs_5++;\n"
"			float val_lhs_6_0 = * ptr_lhs_6++;\n"
"			float val_lhs_7_0 = * ptr_lhs_7++;\n"
"			float val_lhs_0_1 = * ptr_lhs_0++;\n"
"			float val_lhs_1_1 = * ptr_lhs_1++;\n"
"			float val_lhs_2_1 = * ptr_lhs_2++;\n"
"			float val_lhs_3_1 = * ptr_lhs_3++;\n"
"			float val_lhs_4_1 = * ptr_lhs_4++;\n"
"			float val_lhs_5_1 = * ptr_lhs_5++;\n"
"			float val_lhs_6_1 = * ptr_lhs_6++;\n"
"			float val_lhs_7_1 = * ptr_lhs_7++;\n"
"			float val_lhs_0_2 = * ptr_lhs_0++;\n"
"			float val_lhs_1_2 = * ptr_lhs_1++;\n"
"			float val_lhs_2_2 = * ptr_lhs_2++;\n"
"			float val_lhs_3_2 = * ptr_lhs_3++;\n"
"			float val_lhs_4_2 = * ptr_lhs_4++;\n"
"			float val_lhs_5_2 = * ptr_lhs_5++;\n"
"			float val_lhs_6_2 = * ptr_lhs_6++;\n"
"			float val_lhs_7_2 = * ptr_lhs_7++;\n"
"			float val_lhs_0_3 = * ptr_lhs_0++;\n"
"			float val_lhs_1_3 = * ptr_lhs_1++;\n"
"			float val_lhs_2_3 = * ptr_lhs_2++;\n"
"			float val_lhs_3_3 = * ptr_lhs_3++;\n"
"			float val_lhs_4_3 = * ptr_lhs_4++;\n"
"			float val_lhs_5_3 = * ptr_lhs_5++;\n"
"			float val_lhs_6_3 = * ptr_lhs_6++;\n"
"			float val_lhs_7_3 = * ptr_lhs_7++;\n"
"			res00.s0+=val_lhs_0_0*val_rhs_0_0.s0;\n"
"			res00.s1+=val_lhs_0_1*val_rhs_0_0.s0;\n"
"			res00.s2+=val_lhs_0_2*val_rhs_0_0.s0;\n"
"			res00.s3+=val_lhs_0_3*val_rhs_0_0.s0;\n"
"			res01.s0+=val_lhs_0_0*val_rhs_0_0.s1;\n"
"			res01.s1+=val_lhs_0_1*val_rhs_0_0.s1;\n"
"			res01.s2+=val_lhs_0_2*val_rhs_0_0.s1;\n"
"			res01.s3+=val_lhs_0_3*val_rhs_0_0.s1;\n"
"			res02.s0+=val_lhs_0_0*val_rhs_0_0.s2;\n"
"			res02.s1+=val_lhs_0_1*val_rhs_0_0.s2;\n"
"			res02.s2+=val_lhs_0_2*val_rhs_0_0.s2;\n"
"			res02.s3+=val_lhs_0_3*val_rhs_0_0.s2;\n"
"			res03.s0+=val_lhs_0_0*val_rhs_0_0.s3;\n"
"			res03.s1+=val_lhs_0_1*val_rhs_0_0.s3;\n"
"			res03.s2+=val_lhs_0_2*val_rhs_0_0.s3;\n"
"			res03.s3+=val_lhs_0_3*val_rhs_0_0.s3;\n"
"			res00.s0+=val_lhs_1_0*val_rhs_1_0.s0;\n"
"			res00.s1+=val_lhs_1_1*val_rhs_1_0.s0;\n"
"			res00.s2+=val_lhs_1_2*val_rhs_1_0.s0;\n"
"			res00.s3+=val_lhs_1_3*val_rhs_1_0.s0;\n"
"			res01.s0+=val_lhs_1_0*val_rhs_1_0.s1;\n"
"			res01.s1+=val_lhs_1_1*val_rhs_1_0.s1;\n"
"			res01.s2+=val_lhs_1_2*val_rhs_1_0.s1;\n"
"			res01.s3+=val_lhs_1_3*val_rhs_1_0.s1;\n"
"			res02.s0+=val_lhs_1_0*val_rhs_1_0.s2;\n"
"			res02.s1+=val_lhs_1_1*val_rhs_1_0.s2;\n"
"			res02.s2+=val_lhs_1_2*val_rhs_1_0.s2;\n"
"			res02.s3+=val_lhs_1_3*val_rhs_1_0.s2;\n"
"			res03.s0+=val_lhs_1_0*val_rhs_1_0.s3;\n"
"			res03.s1+=val_lhs_1_1*val_rhs_1_0.s3;\n"
"			res03.s2+=val_lhs_1_2*val_rhs_1_0.s3;\n"
"			res03.s3+=val_lhs_1_3*val_rhs_1_0.s3;\n"
"			res00.s0+=val_lhs_2_0*val_rhs_2_0.s0;\n"
"			res00.s1+=val_lhs_2_1*val_rhs_2_0.s0;\n"
"			res00.s2+=val_lhs_2_2*val_rhs_2_0.s0;\n"
"			res00.s3+=val_lhs_2_3*val_rhs_2_0.s0;\n"
"			res01.s0+=val_lhs_2_0*val_rhs_2_0.s1;\n"
"			res01.s1+=val_lhs_2_1*val_rhs_2_0.s1;\n"
"			res01.s2+=val_lhs_2_2*val_rhs_2_0.s1;\n"
"			res01.s3+=val_lhs_2_3*val_rhs_2_0.s1;\n"
"			res02.s0+=val_lhs_2_0*val_rhs_2_0.s2;\n"
"			res02.s1+=val_lhs_2_1*val_rhs_2_0.s2;\n"
"			res02.s2+=val_lhs_2_2*val_rhs_2_0.s2;\n"
"			res02.s3+=val_lhs_2_3*val_rhs_2_0.s2;\n"
"			res03.s0+=val_lhs_2_0*val_rhs_2_0.s3;\n"
"			res03.s1+=val_lhs_2_1*val_rhs_2_0.s3;\n"
"			res03.s2+=val_lhs_2_2*val_rhs_2_0.s3;\n"
"			res03.s3+=val_lhs_2_3*val_rhs_2_0.s3;\n"
"			res00.s0+=val_lhs_3_0*val_rhs_3_0.s0;\n"
"			res00.s1+=val_lhs_3_1*val_rhs_3_0.s0;\n"
"			res00.s2+=val_lhs_3_2*val_rhs_3_0.s0;\n"
"			res00.s3+=val_lhs_3_3*val_rhs_3_0.s0;\n"
"			res01.s0+=val_lhs_3_0*val_rhs_3_0.s1;\n"
"			res01.s1+=val_lhs_3_1*val_rhs_3_0.s1;\n"
"			res01.s2+=val_lhs_3_2*val_rhs_3_0.s1;\n"
"			res01.s3+=val_lhs_3_3*val_rhs_3_0.s1;\n"
"			res02.s0+=val_lhs_3_0*val_rhs_3_0.s2;\n"
"			res02.s1+=val_lhs_3_1*val_rhs_3_0.s2;\n"
"			res02.s2+=val_lhs_3_2*val_rhs_3_0.s2;\n"
"			res02.s3+=val_lhs_3_3*val_rhs_3_0.s2;\n"
"			res03.s0+=val_lhs_3_0*val_rhs_3_0.s3;\n"
"			res03.s1+=val_lhs_3_1*val_rhs_3_0.s3;\n"
"			res03.s2+=val_lhs_3_2*val_rhs_3_0.s3;\n"
"			res03.s3+=val_lhs_3_3*val_rhs_3_0.s3;\n"
"			res00.s0+=val_lhs_4_0*val_rhs_4_0.s0;\n"
"			res00.s1+=val_lhs_4_1*val_rhs_4_0.s0;\n"
"			res00.s2+=val_lhs_4_2*val_rhs_4_0.s0;\n"
"			res00.s3+=val_lhs_4_3*val_rhs_4_0.s0;\n"
"			res01.s0+=val_lhs_4_0*val_rhs_4_0.s1;\n"
"			res01.s1+=val_lhs_4_1*val_rhs_4_0.s1;\n"
"			res01.s2+=val_lhs_4_2*val_rhs_4_0.s1;\n"
"			res01.s3+=val_lhs_4_3*val_rhs_4_0.s1;\n"
"			res02.s0+=val_lhs_4_0*val_rhs_4_0.s2;\n"
"			res02.s1+=val_lhs_4_1*val_rhs_4_0.s2;\n"
"			res02.s2+=val_lhs_4_2*val_rhs_4_0.s2;\n"
"			res02.s3+=val_lhs_4_3*val_rhs_4_0.s2;\n"
"			res03.s0+=val_lhs_4_0*val_rhs_4_0.s3;\n"
"			res03.s1+=val_lhs_4_1*val_rhs_4_0.s3;\n"
"			res03.s2+=val_lhs_4_2*val_rhs_4_0.s3;\n"
"			res03.s3+=val_lhs_4_3*val_rhs_4_0.s3;\n"
"			res00.s0+=val_lhs_5_0*val_rhs_5_0.s0;\n"
"			res00.s1+=val_lhs_5_1*val_rhs_5_0.s0;\n"
"			res00.s2+=val_lhs_5_2*val_rhs_5_0.s0;\n"
"			res00.s3+=val_lhs_5_3*val_rhs_5_0.s0;\n"
"			res01.s0+=val_lhs_5_0*val_rhs_5_0.s1;\n"
"			res01.s1+=val_lhs_5_1*val_rhs_5_0.s1;\n"
"			res01.s2+=val_lhs_5_2*val_rhs_5_0.s1;\n"
"			res01.s3+=val_lhs_5_3*val_rhs_5_0.s1;\n"
"			res02.s0+=val_lhs_5_0*val_rhs_5_0.s2;\n"
"			res02.s1+=val_lhs_5_1*val_rhs_5_0.s2;\n"
"			res02.s2+=val_lhs_5_2*val_rhs_5_0.s2;\n"
"			res02.s3+=val_lhs_5_3*val_rhs_5_0.s2;\n"
"			res03.s0+=val_lhs_5_0*val_rhs_5_0.s3;\n"
"			res03.s1+=val_lhs_5_1*val_rhs_5_0.s3;\n"
"			res03.s2+=val_lhs_5_2*val_rhs_5_0.s3;\n"
"			res03.s3+=val_lhs_5_3*val_rhs_5_0.s3;\n"
"			res00.s0+=val_lhs_6_0*val_rhs_6_0.s0;\n"
"			res00.s1+=val_lhs_6_1*val_rhs_6_0.s0;\n"
"			res00.s2+=val_lhs_6_2*val_rhs_6_0.s0;\n"
"			res00.s3+=val_lhs_6_3*val_rhs_6_0.s0;\n"
"			res01.s0+=val_lhs_6_0*val_rhs_6_0.s1;\n"
"			res01.s1+=val_lhs_6_1*val_rhs_6_0.s1;\n"
"			res01.s2+=val_lhs_6_2*val_rhs_6_0.s1;\n"
"			res01.s3+=val_lhs_6_3*val_rhs_6_0.s1;\n"
"			res02.s0+=val_lhs_6_0*val_rhs_6_0.s2;\n"
"			res02.s1+=val_lhs_6_1*val_rhs_6_0.s2;\n"
"			res02.s2+=val_lhs_6_2*val_rhs_6_0.s2;\n"
"			res02.s3+=val_lhs_6_3*val_rhs_6_0.s2;\n"
"			res03.s0+=val_lhs_6_0*val_rhs_6_0.s3;\n"
"			res03.s1+=val_lhs_6_1*val_rhs_6_0.s3;\n"
"			res03.s2+=val_lhs_6_2*val_rhs_6_0.s3;\n"
"			res03.s3+=val_lhs_6_3*val_rhs_6_0.s3;\n"
"			res00.s0+=val_lhs_7_0*val_rhs_7_0.s0;\n"
"			res00.s1+=val_lhs_7_1*val_rhs_7_0.s0;\n"
"			res00.s2+=val_lhs_7_2*val_rhs_7_0.s0;\n"
"			res00.s3+=val_lhs_7_3*val_rhs_7_0.s0;\n"
"			res01.s0+=val_lhs_7_0*val_rhs_7_0.s1;\n"
"			res01.s1+=val_lhs_7_1*val_rhs_7_0.s1;\n"
"			res01.s2+=val_lhs_7_2*val_rhs_7_0.s1;\n"
"			res01.s3+=val_lhs_7_3*val_rhs_7_0.s1;\n"
"			res02.s0+=val_lhs_7_0*val_rhs_7_0.s2;\n"
"			res02.s1+=val_lhs_7_1*val_rhs_7_0.s2;\n"
"			res02.s2+=val_lhs_7_2*val_rhs_7_0.s2;\n"
"			res02.s3+=val_lhs_7_3*val_rhs_7_0.s2;\n"
"			res03.s0+=val_lhs_7_0*val_rhs_7_0.s3;\n"
"			res03.s1+=val_lhs_7_1*val_rhs_7_0.s3;\n"
"			res03.s2+=val_lhs_7_2*val_rhs_7_0.s3;\n"
"			res03.s3+=val_lhs_7_3*val_rhs_7_0.s3;\n"
"			rhs_ptr_0 += 8*rhs_internal_size2 - 1;\n"
"			rhs_ptr_1 += 8*rhs_internal_size2 - 1;\n"
"			rhs_ptr_2 += 8*rhs_internal_size2 - 1;\n"
"			rhs_ptr_3 += 8*rhs_internal_size2 - 1;\n"
"			rhs_ptr_4 += 8*rhs_internal_size2 - 1;\n"
"			rhs_ptr_5 += 8*rhs_internal_size2 - 1;\n"
"			rhs_ptr_6 += 8*rhs_internal_size2 - 1;\n"
"			rhs_ptr_7 += 8*rhs_internal_size2 - 1;\n"
"			ptr_lhs_0 += 260;\n"
"			ptr_lhs_1 += 260;\n"
"			ptr_lhs_2 += 260;\n"
"			ptr_lhs_3 += 260;\n"
"			ptr_lhs_4 += 260;\n"
"			ptr_lhs_5 += 260;\n"
"			ptr_lhs_6 += 260;\n"
"			ptr_lhs_7 += 260;\n"
"		}\n"
"		offsetLHS += 16;\n"
"	}\n"
"	*res_ptr = (beta != 0) ? alpha*res00 + beta * *res_ptr : alpha*res00;\n"
"	res_ptr++;\n"
"	res_ptr+=res_internal_size1 - 1;\n"
"	*res_ptr = (beta != 0) ? alpha*res01 + beta * *res_ptr : alpha*res01;\n"
"	res_ptr++;\n"
"	res_ptr+=res_internal_size1 - 1;\n"
"	*res_ptr = (beta != 0) ? alpha*res02 + beta * *res_ptr : alpha*res02;\n"
"	res_ptr++;\n"
"	res_ptr+=res_internal_size1 - 1;\n"
"	*res_ptr = (beta != 0) ? alpha*res03 + beta * *res_ptr : alpha*res03;\n"
"	res_ptr++;\n"
"}\n"
; //matrix_prod_col_row_col_align1_prod_TA_amd

const char * const matrix_prod_col_row_col_align1_prod_AA_amd = 
"__kernel void prod_AA_amd( float alpha\n"
", __global float4* lhs, unsigned int lhs_offset1, unsigned int lhs_offset2, unsigned int lhs_stride1, unsigned int lhs_stride2, unsigned int lhs_size1, unsigned int lhs_size2, unsigned int lhs_internal_size1, unsigned int lhs_internal_size2\n"
", __global float4* rhs, unsigned int rhs_offset1, unsigned int rhs_offset2, unsigned int rhs_stride1, unsigned int rhs_stride2, unsigned int rhs_size1, unsigned int rhs_size2, unsigned int rhs_internal_size1, unsigned int rhs_internal_size2\n"
",float beta\n"
", __global float4* res, unsigned int res_offset1, unsigned int res_offset2, unsigned int res_stride1, unsigned int res_stride2, unsigned int res_size1, unsigned int res_size2, unsigned int res_internal_size1, unsigned int res_internal_size2)\n"
"{\n"
"	float4 res00 = (float4)(0) ;\n"
"	float4 res01 = (float4)(0) ;\n"
"	float4 res02 = (float4)(0) ;\n"
"	float4 res03 = (float4)(0) ;\n"
"	__local float local_lhs[2080];\n"
"	lhs_internal_size1/=4;\n"
"	rhs_internal_size2/=4;\n"
"	res_internal_size1/=4;\n"
"	unsigned int block_num = lhs_internal_size2/64;\n"
"	__global float4* res_ptr = res + (get_global_id(0)*1)+ (get_global_id(1)*4)*res_internal_size1;\n"
"	__global float4 * rhs_ptr_0 = rhs + (0)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	__global float4 * rhs_ptr_1 = rhs + (1)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	__global float4 * rhs_ptr_2 = rhs + (2)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	__global float4 * rhs_ptr_3 = rhs + (3)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	__global float4 * rhs_ptr_4 = rhs + (4)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	__global float4 * rhs_ptr_5 = rhs + (5)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	__global float4 * rhs_ptr_6 = rhs + (6)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	__global float4 * rhs_ptr_7 = rhs + (7)*rhs_internal_size2+ (get_local_id(1)*1 +  get_group_id(1)*32);\n"
"	unsigned int offsetLHS = (get_group_id(0)*8)+ (0)*lhs_internal_size1;\n"
"	for(unsigned int bl=0 ; bl<block_num ; ++bl){\n"
"		barrier(CLK_LOCAL_MEM_FENCE);\n"
"		for(unsigned int i = get_local_id(0) ; i < 8; i+= get_local_size(0)){\n"
"			for(unsigned int j = get_local_id(1) ; j < 64; j+= get_local_size(1)){\n"
"				float4 val = lhs[offsetLHS+ j*lhs_internal_size1 + i];\n"
"				__local float* ptr = local_lhs + i*260+ j;\n"
"				*ptr =  val.s0;\n"
"				ptr += 65;\n"
"				*ptr =  val.s1;\n"
"				ptr += 65;\n"
"				*ptr =  val.s2;\n"
"				ptr += 65;\n"
"				*ptr =  val.s3;\n"
"				ptr += 65;\n"
"			}\n"
"		}\n"
"		barrier(CLK_LOCAL_MEM_FENCE);\n"
"		__local float* ptr_lhs_0 = local_lhs + (get_local_id(0)*4+0)*65;\n"
"		__local float* ptr_lhs_1 = local_lhs + (get_local_id(0)*4+1)*65;\n"
"		__local float* ptr_lhs_2 = local_lhs + (get_local_id(0)*4+2)*65;\n"
"		__local float* ptr_lhs_3 = local_lhs + (get_local_id(0)*4+3)*65;\n"
"		 for(unsigned int bs=0 ; bs < 8 ; ++bs){\n"
"			float4 val_rhs_0_0 = *rhs_ptr_0;++rhs_ptr_0;\n"
"			float4 val_rhs_1_0 = *rhs_ptr_1;++rhs_ptr_1;\n"
"			float4 val_rhs_2_0 = *rhs_ptr_2;++rhs_ptr_2;\n"
"			float4 val_rhs_3_0 = *rhs_ptr_3;++rhs_ptr_3;\n"
"			float4 val_rhs_4_0 = *rhs_ptr_4;++rhs_ptr_4;\n"
"			float4 val_rhs_5_0 = *rhs_ptr_5;++rhs_ptr_5;\n"
"			float4 val_rhs_6_0 = *rhs_ptr_6;++rhs_ptr_6;\n"
"			float4 val_rhs_7_0 = *rhs_ptr_7;++rhs_ptr_7;\n"
"			float val_lhs_0_0 = * ptr_lhs_0++;\n"
"			float val_lhs_1_0 = * ptr_lhs_1++;\n"
"			float val_lhs_2_0 = * ptr_lhs_2++;\n"
"			float val_lhs_3_0 = * ptr_lhs_3++;\n"
"			float val_lhs_0_1 = * ptr_lhs_0++;\n"
"			float val_lhs_1_1 = * ptr_lhs_1++;\n"
"			float val_lhs_2_1 = * ptr_lhs_2++;\n"
"			float val_lhs_3_1 = * ptr_lhs_3++;\n"
"			float val_lhs_0_2 = * ptr_lhs_0++;\n"
"			float val_lhs_1_2 = * ptr_lhs_1++;\n"
"			float val_lhs_2_2 = * ptr_lhs_2++;\n"
"			float val_lhs_3_2 = * ptr_lhs_3++;\n"
"			float val_lhs_0_3 = * ptr_lhs_0++;\n"
"			float val_lhs_1_3 = * ptr_lhs_1++;\n"
"			float val_lhs_2_3 = * ptr_lhs_2++;\n"
"			float val_lhs_3_3 = * ptr_lhs_3++;\n"
"			float val_lhs_0_4 = * ptr_lhs_0++;\n"
"			float val_lhs_1_4 = * ptr_lhs_1++;\n"
"			float val_lhs_2_4 = * ptr_lhs_2++;\n"
"			float val_lhs_3_4 = * ptr_lhs_3++;\n"
"			float val_lhs_0_5 = * ptr_lhs_0++;\n"
"			float val_lhs_1_5 = * ptr_lhs_1++;\n"
"			float val_lhs_2_5 = * ptr_lhs_2++;\n"
"			float val_lhs_3_5 = * ptr_lhs_3++;\n"
"			float val_lhs_0_6 = * ptr_lhs_0++;\n"
"			float val_lhs_1_6 = * ptr_lhs_1++;\n"
"			float val_lhs_2_6 = * ptr_lhs_2++;\n"
"			float val_lhs_3_6 = * ptr_lhs_3++;\n"
"			float val_lhs_0_7 = * ptr_lhs_0++;\n"
"			float val_lhs_1_7 = * ptr_lhs_1++;\n"
"			float val_lhs_2_7 = * ptr_lhs_2++;\n"
"			float val_lhs_3_7 = * ptr_lhs_3++;\n"
"			res00.s0+=val_lhs_0_0*val_rhs_0_0.s0;\n"
"			res00.s1+=val_lhs_1_0*val_rhs_0_0.s0;\n"
"			res00.s2+=val_lhs_2_0*val_rhs_0_0.s0;\n"
"			res00.s3+=val_lhs_3_0*val_rhs_0_0.s0;\n"
"			res01.s0+=val_lhs_0_0*val_rhs_0_0.s1;\n"
"			res01.s1+=val_lhs_1_0*val_rhs_0_0.s1;\n"
"			res01.s2+=val_lhs_2_0*val_rhs_0_0.s1;\n"
"			res01.s3+=val_lhs_3_0*val_rhs_0_0.s1;\n"
"			res02.s0+=val_lhs_0_0*val_rhs_0_0.s2;\n"
"			res02.s1+=val_lhs_1_0*val_rhs_0_0.s2;\n"
"			res02.s2+=val_lhs_2_0*val_rhs_0_0.s2;\n"
"			res02.s3+=val_lhs_3_0*val_rhs_0_0.s2;\n"
"			res03.s0+=val_lhs_0_0*val_rhs_0_0.s3;\n"
"			res03.s1+=val_lhs_1_0*val_rhs_0_0.s3;\n"
"			res03.s2+=val_lhs_2_0*val_rhs_0_0.s3;\n"
"			res03.s3+=val_lhs_3_0*val_rhs_0_0.s3;\n"
"			res00.s0+=val_lhs_0_1*val_rhs_1_0.s0;\n"
"			res00.s1+=val_lhs_1_1*val_rhs_1_0.s0;\n"
"			res00.s2+=val_lhs_2_1*val_rhs_1_0.s0;\n"
"			res00.s3+=val_lhs_3_1*val_rhs_1_0.s0;\n"
"			res01.s0+=val_lhs_0_1*val_rhs_1_0.s1;\n"
"			res01.s1+=val_lhs_1_1*val_rhs_1_0.s1;\n"
"			res01.s2+=val_lhs_2_1*val_rhs_1_0.s1;\n"
"			res01.s3+=val_lhs_3_1*val_rhs_1_0.s1;\n"
"			res02.s0+=val_lhs_0_1*val_rhs_1_0.s2;\n"
"			res02.s1+=val_lhs_1_1*val_rhs_1_0.s2;\n"
"			res02.s2+=val_lhs_2_1*val_rhs_1_0.s2;\n"
"			res02.s3+=val_lhs_3_1*val_rhs_1_0.s2;\n"
"			res03.s0+=val_lhs_0_1*val_rhs_1_0.s3;\n"
"			res03.s1+=val_lhs_1_1*val_rhs_1_0.s3;\n"
"			res03.s2+=val_lhs_2_1*val_rhs_1_0.s3;\n"
"			res03.s3+=val_lhs_3_1*val_rhs_1_0.s3;\n"
"			res00.s0+=val_lhs_0_2*val_rhs_2_0.s0;\n"
"			res00.s1+=val_lhs_1_2*val_rhs_2_0.s0;\n"
"			res00.s2+=val_lhs_2_2*val_rhs_2_0.s0;\n"
"			res00.s3+=val_lhs_3_2*val_rhs_2_0.s0;\n"
"			res01.s0+=val_lhs_0_2*val_rhs_2_0.s1;\n"
"			res01.s1+=val_lhs_1_2*val_rhs_2_0.s1;\n"
"			res01.s2+=val_lhs_2_2*val_rhs_2_0.s1;\n"
"			res01.s3+=val_lhs_3_2*val_rhs_2_0.s1;\n"
"			res02.s0+=val_lhs_0_2*val_rhs_2_0.s2;\n"
"			res02.s1+=val_lhs_1_2*val_rhs_2_0.s2;\n"
"			res02.s2+=val_lhs_2_2*val_rhs_2_0.s2;\n"
"			res02.s3+=val_lhs_3_2*val_rhs_2_0.s2;\n"
"			res03.s0+=val_lhs_0_2*val_rhs_2_0.s3;\n"
"			res03.s1+=val_lhs_1_2*val_rhs_2_0.s3;\n"
"			res03.s2+=val_lhs_2_2*val_rhs_2_0.s3;\n"
"			res03.s3+=val_lhs_3_2*val_rhs_2_0.s3;\n"
"			res00.s0+=val_lhs_0_3*val_rhs_3_0.s0;\n"
"			res00.s1+=val_lhs_1_3*val_rhs_3_0.s0;\n"
"			res00.s2+=val_lhs_2_3*val_rhs_3_0.s0;\n"
"			res00.s3+=val_lhs_3_3*val_rhs_3_0.s0;\n"
"			res01.s0+=val_lhs_0_3*val_rhs_3_0.s1;\n"
"			res01.s1+=val_lhs_1_3*val_rhs_3_0.s1;\n"
"			res01.s2+=val_lhs_2_3*val_rhs_3_0.s1;\n"
"			res01.s3+=val_lhs_3_3*val_rhs_3_0.s1;\n"
"			res02.s0+=val_lhs_0_3*val_rhs_3_0.s2;\n"
"			res02.s1+=val_lhs_1_3*val_rhs_3_0.s2;\n"
"			res02.s2+=val_lhs_2_3*val_rhs_3_0.s2;\n"
"			res02.s3+=val_lhs_3_3*val_rhs_3_0.s2;\n"
"			res03.s0+=val_lhs_0_3*val_rhs_3_0.s3;\n"
"			res03.s1+=val_lhs_1_3*val_rhs_3_0.s3;\n"
"			res03.s2+=val_lhs_2_3*val_rhs_3_0.s3;\n"
"			res03.s3+=val_lhs_3_3*val_rhs_3_0.s3;\n"
"			res00.s0+=val_lhs_0_4*val_rhs_4_0.s0;\n"
"			res00.s1+=val_lhs_1_4*val_rhs_4_0.s0;\n"
"			res00.s2+=val_lhs_2_4*val_rhs_4_0.s0;\n"
"			res00.s3+=val_lhs_3_4*val_rhs_4_0.s0;\n"
"			res01.s0+=val_lhs_0_4*val_rhs_4_0.s1;\n"
"			res01.s1+=val_lhs_1_4*val_rhs_4_0.s1;\n"
"			res01.s2+=val_lhs_2_4*val_rhs_4_0.s1;\n"
"			res01.s3+=val_lhs_3_4*val_rhs_4_0.s1;\n"
"			res02.s0+=val_lhs_0_4*val_rhs_4_0.s2;\n"
"			res02.s1+=val_lhs_1_4*val_rhs_4_0.s2;\n"
"			res02.s2+=val_lhs_2_4*val_rhs_4_0.s2;\n"
"			res02.s3+=val_lhs_3_4*val_rhs_4_0.s2;\n"
"			res03.s0+=val_lhs_0_4*val_rhs_4_0.s3;\n"
"			res03.s1+=val_lhs_1_4*val_rhs_4_0.s3;\n"
"			res03.s2+=val_lhs_2_4*val_rhs_4_0.s3;\n"
"			res03.s3+=val_lhs_3_4*val_rhs_4_0.s3;\n"
"			res00.s0+=val_lhs_0_5*val_rhs_5_0.s0;\n"
"			res00.s1+=val_lhs_1_5*val_rhs_5_0.s0;\n"
"			res00.s2+=val_lhs_2_5*val_rhs_5_0.s0;\n"
"			res00.s3+=val_lhs_3_5*val_rhs_5_0.s0;\n"
"			res01.s0+=val_lhs_0_5*val_rhs_5_0.s1;\n"
"			res01.s1+=val_lhs_1_5*val_rhs_5_0.s1;\n"
"			res01.s2+=val_lhs_2_5*val_rhs_5_0.s1;\n"
"			res01.s3+=val_lhs_3_5*val_rhs_5_0.s1;\n"
"			res02.s0+=val_lhs_0_5*val_rhs_5_0.s2;\n"
"			res02.s1+=val_lhs_1_5*val_rhs_5_0.s2;\n"
"			res02.s2+=val_lhs_2_5*val_rhs_5_0.s2;\n"
"			res02.s3+=val_lhs_3_5*val_rhs_5_0.s2;\n"
"			res03.s0+=val_lhs_0_5*val_rhs_5_0.s3;\n"
"			res03.s1+=val_lhs_1_5*val_rhs_5_0.s3;\n"
"			res03.s2+=val_lhs_2_5*val_rhs_5_0.s3;\n"
"			res03.s3+=val_lhs_3_5*val_rhs_5_0.s3;\n"
"			res00.s0+=val_lhs_0_6*val_rhs_6_0.s0;\n"
"			res00.s1+=val_lhs_1_6*val_rhs_6_0.s0;\n"
"			res00.s2+=val_lhs_2_6*val_rhs_6_0.s0;\n"
"			res00.s3+=val_lhs_3_6*val_rhs_6_0.s0;\n"
"			res01.s0+=val_lhs_0_6*val_rhs_6_0.s1;\n"
"			res01.s1+=val_lhs_1_6*val_rhs_6_0.s1;\n"
"			res01.s2+=val_lhs_2_6*val_rhs_6_0.s1;\n"
"			res01.s3+=val_lhs_3_6*val_rhs_6_0.s1;\n"
"			res02.s0+=val_lhs_0_6*val_rhs_6_0.s2;\n"
"			res02.s1+=val_lhs_1_6*val_rhs_6_0.s2;\n"
"			res02.s2+=val_lhs_2_6*val_rhs_6_0.s2;\n"
"			res02.s3+=val_lhs_3_6*val_rhs_6_0.s2;\n"
"			res03.s0+=val_lhs_0_6*val_rhs_6_0.s3;\n"
"			res03.s1+=val_lhs_1_6*val_rhs_6_0.s3;\n"
"			res03.s2+=val_lhs_2_6*val_rhs_6_0.s3;\n"
"			res03.s3+=val_lhs_3_6*val_rhs_6_0.s3;\n"
"			res00.s0+=val_lhs_0_7*val_rhs_7_0.s0;\n"
"			res00.s1+=val_lhs_1_7*val_rhs_7_0.s0;\n"
"			res00.s2+=val_lhs_2_7*val_rhs_7_0.s0;\n"
"			res00.s3+=val_lhs_3_7*val_rhs_7_0.s0;\n"
"			res01.s0+=val_lhs_0_7*val_rhs_7_0.s1;\n"
"			res01.s1+=val_lhs_1_7*val_rhs_7_0.s1;\n"
"			res01.s2+=val_lhs_2_7*val_rhs_7_0.s1;\n"
"			res01.s3+=val_lhs_3_7*val_rhs_7_0.s1;\n"
"			res02.s0+=val_lhs_0_7*val_rhs_7_0.s2;\n"
"			res02.s1+=val_lhs_1_7*val_rhs_7_0.s2;\n"
"			res02.s2+=val_lhs_2_7*val_rhs_7_0.s2;\n"
"			res02.s3+=val_lhs_3_7*val_rhs_7_0.s2;\n"
"			res03.s0+=val_lhs_0_7*val_rhs_7_0.s3;\n"
"			res03.s1+=val_lhs_1_7*val_rhs_7_0.s3;\n"
"			res03.s2+=val_lhs_2_7*val_rhs_7_0.s3;\n"
"			res03.s3+=val_lhs_3_7*val_rhs_7_0.s3;\n"
"			rhs_ptr_0 += 8*rhs_internal_size2 - 1;\n"
"			rhs_ptr_1 += 8*rhs_internal_size2 - 1;\n"
"			rhs_ptr_2 += 8*rhs_internal_size2 - 1;\n"
"			rhs_ptr_3 += 8*rhs_internal_size2 - 1;\n"
"			rhs_ptr_4 += 8*rhs_internal_size2 - 1;\n"
"			rhs_ptr_5 += 8*rhs_internal_size2 - 1;\n"
"			rhs_ptr_6 += 8*rhs_internal_size2 - 1;\n"
"			rhs_ptr_7 += 8*rhs_internal_size2 - 1;\n"
"		}\n"
"		offsetLHS += 64*lhs_internal_size1;\n"
"	}\n"
"	*res_ptr = (beta != 0) ? alpha*res00 + beta * *res_ptr : alpha*res00;\n"
"	res_ptr++;\n"
"	res_ptr+=res_internal_size1 - 1;\n"
"	*res_ptr = (beta != 0) ? alpha*res01 + beta * *res_ptr : alpha*res01;\n"
"	res_ptr++;\n"
"	res_ptr+=res_internal_size1 - 1;\n"
"	*res_ptr = (beta != 0) ? alpha*res02 + beta * *res_ptr : alpha*res02;\n"
"	res_ptr++;\n"
"	res_ptr+=res_internal_size1 - 1;\n"
"	*res_ptr = (beta != 0) ? alpha*res03 + beta * *res_ptr : alpha*res03;\n"
"	res_ptr++;\n"
"}\n"
; //matrix_prod_col_row_col_align1_prod_AA_amd

const char * const matrix_prod_col_row_col_align1_prod16_TA = 
"// file automatically generated - do not edit!\n"
"// matrix-matrix multiplication C = A^T * B\n"
"// matrix layouts: C...col_major, A...col_major, B...row_major\n"
"__kernel void prod16_TA(\n"
"          float alpha,\n"
"          __global const float * A,\n"
"          unsigned int A_row_start,\n"
"          unsigned int A_col_start,\n"
"          unsigned int A_row_inc,\n"
"          unsigned int A_col_inc,\n"
"          unsigned int A_row_size,\n"
"          unsigned int A_col_size,\n"
"          unsigned int A_internal_rows,\n"
"          unsigned int A_internal_cols,\n"
"          __global const float * B,  \n"
"          unsigned int B_row_start,\n"
"          unsigned int B_col_start,\n"
"          unsigned int B_row_inc,\n"
"          unsigned int B_col_inc,\n"
"          unsigned int B_row_size,\n"
"          unsigned int B_col_size,\n"
"          unsigned int B_internal_rows,\n"
"          unsigned int B_internal_cols,\n"
"          float beta,\n"
"          __global float * C,\n"
"          unsigned int C_row_start,\n"
"          unsigned int C_col_start,\n"
"          unsigned int C_row_inc,\n"
"          unsigned int C_col_inc,\n"
"          unsigned int C_row_size,\n"
"          unsigned int C_col_size,\n"
"          unsigned int C_internal_rows,\n"
"          unsigned int C_internal_cols) \n"
"{ \n"
"  size_t row_block_id = get_group_id(1);\n"
"  size_t col_block_id = get_group_id(0);\n"
"  size_t row_thread_id = get_local_id(1);\n"
"  size_t col_thread_id = get_local_id(0);\n"
"  __local float As[256];\n"
"  float cv[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n"
"  size_t aBegin = (row_block_id * 16 * A_col_inc + A_col_start) * A_internal_rows + A_row_start;\n"
"  size_t aStep = 16 * A_row_inc;\n"
"  size_t aEnd = aBegin + A_row_inc * A_row_size;\n"
"  size_t bBegin = (col_block_id * 64 * B_col_inc + B_col_start) + B_row_start * B_internal_cols;\n"
"  size_t bStep = 16 * B_row_inc * B_internal_cols;\n"
"  for(size_t a = aBegin, b = bBegin; a < aEnd; a += aStep, b += bStep) { \n"
"    for(size_t i = 0; i < 4; i++)  \n"
"      As[ (i*4 + row_thread_id) + 16 * col_thread_id] = (A[a + A_internal_rows * A_col_inc * (i * 4 + row_thread_id) + A_row_inc * col_thread_id]);\n"
"    barrier(CLK_LOCAL_MEM_FENCE); \n"
"    __local  float *ap = As; \n"
"    __global const float *bp = B + (b + (16 * row_thread_id + col_thread_id) * B_col_inc); \n"
"    for(size_t i = 0; i < 16; i++) { \n"
"      float bv = bp[i * B_row_inc * B_internal_cols]; \n"
"      for(size_t k = 0; k < 16; k++)  \n"
"	    cv[k] += ap[k] * bv; \n"
"      ap += 16; \n"
"    } \n"
"    barrier(CLK_LOCAL_MEM_FENCE); \n"
"  } \n"
"  int c = C_row_inc * 16 * row_block_id + C_row_start + (64 * C_col_inc * col_block_id + C_col_start) * C_internal_rows \n"
"          + C_internal_rows * C_col_inc * (16 * row_thread_id + col_thread_id); \n"
"  for(size_t i = 0; i < 16; i++) { \n"
"    C[c] = (beta == 0) ? alpha * cv[i] : alpha * cv[i] + beta * C[c]; \n"
"      c += C_row_inc; \n"
"  } \n"
"} \n"
; //matrix_prod_col_row_col_align1_prod16_TA

const char * const matrix_prod_col_row_col_align1_prod16_AA = 
"// file automatically generated - do not edit!\n"
"// matrix-matrix multiplication C = A * B\n"
"// matrix layouts: C...col_major, A...col_major, B...row_major\n"
"__kernel void prod16_AA(\n"
"          float alpha,\n"
"          __global const float * A,\n"
"          unsigned int A_row_start,\n"
"          unsigned int A_col_start,\n"
"          unsigned int A_row_inc,\n"
"          unsigned int A_col_inc,\n"
"          unsigned int A_row_size,\n"
"          unsigned int A_col_size,\n"
"          unsigned int A_internal_rows,\n"
"          unsigned int A_internal_cols,\n"
"          __global const float * B,  \n"
"          unsigned int B_row_start,\n"
"          unsigned int B_col_start,\n"
"          unsigned int B_row_inc,\n"
"          unsigned int B_col_inc,\n"
"          unsigned int B_row_size,\n"
"          unsigned int B_col_size,\n"
"          unsigned int B_internal_rows,\n"
"          unsigned int B_internal_cols,\n"
"          float beta,\n"
"          __global float * C,\n"
"          unsigned int C_row_start,\n"
"          unsigned int C_col_start,\n"
"          unsigned int C_row_inc,\n"
"          unsigned int C_col_inc,\n"
"          unsigned int C_row_size,\n"
"          unsigned int C_col_size,\n"
"          unsigned int C_internal_rows,\n"
"          unsigned int C_internal_cols) \n"
"{ \n"
"  size_t row_block_id = get_group_id(1);\n"
"  size_t col_block_id = get_group_id(0);\n"
"  size_t row_thread_id = get_local_id(1);\n"
"  size_t col_thread_id = get_local_id(0);\n"
"  __local float As[256];\n"
"  float cv[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n"
"  size_t aBegin = (row_block_id * 16 * A_row_inc + A_row_start) + A_col_start * A_internal_rows;\n"
"  size_t aStep = 16 * A_internal_rows * A_col_inc;\n"
"  size_t aEnd = aBegin + A_internal_rows * A_col_inc * A_col_size;\n"
"  size_t bBegin = (col_block_id * 64 * B_col_inc + B_col_start) + B_row_start * B_internal_cols;\n"
"  size_t bStep = 16 * B_row_inc * B_internal_cols;\n"
"  for(size_t a = aBegin, b = bBegin; a < aEnd; a += aStep, b += bStep) { \n"
"    for(size_t i = 0; i < 4; i++)  \n"
"      As[ (i*4 + row_thread_id) + 16 * col_thread_id] = (A[a + A_row_inc * (i * 4 + row_thread_id) + A_internal_rows * A_col_inc * col_thread_id]);\n"
"    barrier(CLK_LOCAL_MEM_FENCE); \n"
"    __local  float *ap = As; \n"
"    __global const float *bp = B + (b + (16 * row_thread_id + col_thread_id) * B_col_inc); \n"
"    for(size_t i = 0; i < 16; i++) { \n"
"      float bv = bp[i * B_row_inc * B_internal_cols]; \n"
"      for(size_t k = 0; k < 16; k++)  \n"
"	    cv[k] += ap[k] * bv; \n"
"      ap += 16; \n"
"    } \n"
"    barrier(CLK_LOCAL_MEM_FENCE); \n"
"  } \n"
"  int c = C_row_inc * 16 * row_block_id + C_row_start + (64 * C_col_inc * col_block_id + C_col_start) * C_internal_rows \n"
"          + C_internal_rows * C_col_inc * (16 * row_thread_id + col_thread_id); \n"
"  for(size_t i = 0; i < 16; i++) { \n"
"    C[c] = (beta == 0) ? alpha * cv[i] : alpha * cv[i] + beta * C[c]; \n"
"      c += C_row_inc; \n"
"  } \n"
"} \n"
; //matrix_prod_col_row_col_align1_prod16_AA

const char * const matrix_prod_col_row_col_align1_prod_AA = 
"// file automatically generated - do not edit!\n"
"// matrix-matrix multiplication C = A * B\n"
"// matrix layouts: C...col_major, A...col_major, B...row_major\n"
"__kernel void prod_AA(\n"
"          float alpha,\n"
"          __global const float * A,\n"
"          unsigned int A_row_start,\n"
"          unsigned int A_col_start,\n"
"          unsigned int A_row_inc,\n"
"          unsigned int A_col_inc,\n"
"          unsigned int A_row_size,\n"
"          unsigned int A_col_size,\n"
"          unsigned int A_internal_rows,\n"
"          unsigned int A_internal_cols,\n"
"          __global const float * B,  \n"
"          unsigned int B_row_start,\n"
"          unsigned int B_col_start,\n"
"          unsigned int B_row_inc,\n"
"          unsigned int B_col_inc,\n"
"          unsigned int B_row_size,\n"
"          unsigned int B_col_size,\n"
"          unsigned int B_internal_rows,\n"
"          unsigned int B_internal_cols,\n"
"          float beta,\n"
"          __global float * C,\n"
"          unsigned int C_row_start,\n"
"          unsigned int C_col_start,\n"
"          unsigned int C_row_inc,\n"
"          unsigned int C_col_inc,\n"
"          unsigned int C_row_size,\n"
"          unsigned int C_col_size,\n"
"          unsigned int C_internal_rows,\n"
"          unsigned int C_internal_cols) \n"
"{ \n"
"  __local float bufA[272];\n"
"  __local float bufB[272];\n"
"  size_t block_size = 16;//get_local_size(0);\n"
"  size_t row_block_id = get_group_id(0);\n"
"  size_t col_block_id = get_group_id(1);\n"
"  size_t row_thread_id = get_local_id(0);\n"
"  size_t col_thread_id = get_local_id(1);\n"
"  size_t aBegin = (row_block_id * block_size * A_row_inc + A_row_start) + A_col_start * A_internal_rows;\n"
"  size_t aStep = block_size * A_col_inc * A_internal_rows;\n"
"  size_t bBegin = (col_block_id * block_size * B_col_inc + B_col_start) + B_row_start * B_internal_cols;\n"
"  size_t bStep = block_size * B_internal_cols * B_row_inc;\n"
"  size_t block_num = (A_col_size + block_size - 1) / block_size;\n"
"  float Csub = 0;\n"
"  size_t aOffset = row_thread_id * A_row_inc + col_thread_id * A_col_inc * A_internal_rows;\n"
"  size_t bOffset = row_thread_id * B_col_inc + col_thread_id * B_row_inc * B_internal_cols;\n"
"  size_t row_thread_id_times_block_size = row_thread_id * (block_size + 1);\n"
"  size_t col_thread_id_times_block_size = col_thread_id * (block_size + 1);\n"
"  for (size_t block = 0;\n"
"           block < block_num;\n"
"           ++block)\n"
"  {\n"
"    bufA[row_thread_id_times_block_size + col_thread_id] = ((block * block_size + col_thread_id < A_col_size) && (row_block_id * block_size + row_thread_id < A_row_size)) ? A[aBegin + aOffset] : 0;\n"
"    bufB[row_thread_id_times_block_size + col_thread_id] = ((block * block_size + col_thread_id < B_row_size) && (col_block_id * block_size + row_thread_id < B_col_size)) ? B[bBegin + bOffset] : 0;\n"
"    barrier(CLK_LOCAL_MEM_FENCE);\n"
"    __local float * bufAptr = bufA + row_thread_id_times_block_size;\n"
"    __local float * bufBptr = bufB + col_thread_id_times_block_size;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"    barrier(CLK_LOCAL_MEM_FENCE);\n"
"    aBegin += aStep;\n"
"    bBegin += bStep;\n"
"  }\n"
"  if (get_global_id(0) < A_row_size && get_global_id(1) < B_col_size)\n"
"    C[get_global_id(0) * C_row_inc + C_row_start + (get_global_id(1) * C_col_inc + C_col_start) * C_internal_rows] = (beta == 0) ? alpha * Csub : alpha * Csub + beta * C[get_global_id(0) * C_row_inc + C_row_start + (get_global_id(1) * C_col_inc + C_col_start) * C_internal_rows];\n"
"}\n"
; //matrix_prod_col_row_col_align1_prod_AA

const char * const matrix_prod_col_row_col_align1_prod_TT = 
"// file automatically generated - do not edit!\n"
"// matrix-matrix multiplication C = A^T * B^T\n"
"// matrix layouts: C...col_major, A...col_major, B...row_major\n"
"__kernel void prod_TT(\n"
"          float alpha,\n"
"          __global const float * A,\n"
"          unsigned int A_row_start,\n"
"          unsigned int A_col_start,\n"
"          unsigned int A_row_inc,\n"
"          unsigned int A_col_inc,\n"
"          unsigned int A_row_size,\n"
"          unsigned int A_col_size,\n"
"          unsigned int A_internal_rows,\n"
"          unsigned int A_internal_cols,\n"
"          __global const float * B,  \n"
"          unsigned int B_row_start,\n"
"          unsigned int B_col_start,\n"
"          unsigned int B_row_inc,\n"
"          unsigned int B_col_inc,\n"
"          unsigned int B_row_size,\n"
"          unsigned int B_col_size,\n"
"          unsigned int B_internal_rows,\n"
"          unsigned int B_internal_cols,\n"
"          float beta,\n"
"          __global float * C,\n"
"          unsigned int C_row_start,\n"
"          unsigned int C_col_start,\n"
"          unsigned int C_row_inc,\n"
"          unsigned int C_col_inc,\n"
"          unsigned int C_row_size,\n"
"          unsigned int C_col_size,\n"
"          unsigned int C_internal_rows,\n"
"          unsigned int C_internal_cols) \n"
"{ \n"
"  __local float bufA[272];\n"
"  __local float bufB[272];\n"
"  size_t block_size = 16;//get_local_size(0);\n"
"  size_t row_block_id = get_group_id(0);\n"
"  size_t col_block_id = get_group_id(1);\n"
"  size_t row_thread_id = get_local_id(0);\n"
"  size_t col_thread_id = get_local_id(1);\n"
"  size_t aBegin = (row_block_id * block_size * A_col_inc + A_col_start) * A_internal_rows + A_row_start;\n"
"  size_t aStep = block_size * A_row_inc;\n"
"  size_t bBegin = (col_block_id * block_size * B_row_inc + B_row_start) * B_internal_cols + B_col_start;\n"
"  size_t bStep = block_size * B_col_inc;\n"
"  size_t block_num = (A_row_size + block_size - 1) / block_size;\n"
"  float Csub = 0;\n"
"  size_t aOffset = row_thread_id * A_row_inc + col_thread_id * A_col_inc * A_internal_rows;\n"
"  size_t bOffset = row_thread_id * B_col_inc + col_thread_id * B_row_inc * B_internal_cols;\n"
"  size_t row_thread_id_times_block_size = row_thread_id * (block_size + 1);\n"
"  size_t col_thread_id_times_block_size = col_thread_id * (block_size + 1);\n"
"  for (size_t block = 0;\n"
"           block < block_num;\n"
"           ++block)\n"
"  {\n"
"    bufA[col_thread_id_times_block_size + row_thread_id] = ((block * block_size + row_thread_id < A_row_size) && (row_block_id * block_size + col_thread_id < A_col_size)) ? A[aBegin + aOffset] : 0;\n"
"    bufB[col_thread_id_times_block_size + row_thread_id] = ((block * block_size + row_thread_id < B_col_size) && (col_block_id * block_size + col_thread_id < B_row_size)) ? B[bBegin + bOffset] : 0;\n"
"    barrier(CLK_LOCAL_MEM_FENCE);\n"
"    __local float * bufAptr = bufA + row_thread_id_times_block_size;\n"
"    __local float * bufBptr = bufB + col_thread_id_times_block_size;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"      Csub += (*bufAptr) * (*bufBptr); ++bufAptr; ++bufBptr;\n"
"    barrier(CLK_LOCAL_MEM_FENCE);\n"
"    aBegin += aStep;\n"
"    bBegin += bStep;\n"
"  }\n"
"  if (get_global_id(0) < A_col_size && get_global_id(1) < B_row_size)\n"
"    C[get_global_id(0) * C_row_inc + C_row_start + (get_global_id(1) * C_col_inc + C_col_start) * C_internal_rows] = (beta == 0) ? alpha * Csub : alpha * Csub + beta * C[get_global_id(0) * C_row_inc + C_row_start + (get_global_id(1) * C_col_inc + C_col_start) * C_internal_rows];\n"
"}\n"
; //matrix_prod_col_row_col_align1_prod_TT

const char * const matrix_prod_col_row_col_align1_prod_AT_amd = 
"__kernel void prod_AT_amd( float alpha\n"
", __global float4* lhs, unsigned int lhs_offset1, unsigned int lhs_offset2, unsigned int lhs_stride1, unsigned int lhs_stride2, unsigned int lhs_size1, unsigned int lhs_size2, unsigned int lhs_internal_size1, unsigned int lhs_internal_size2\n"
", __global float4* rhs, unsigned int rhs_offset1, unsigned int rhs_offset2, unsigned int rhs_stride1, unsigned int rhs_stride2, unsigned int rhs_size1, unsigned int rhs_size2, unsigned int rhs_internal_size1, unsigned int rhs_internal_size2\n"
",float beta\n"
", __global float4* res, unsigned int res_offset1, unsigned int res_offset2, unsigned int res_stride1, unsigned int res_stride2, unsigned int res_size1, unsigned int res_size2, unsigned int res_internal_size1, unsigned int res_internal_size2)\n"
"{\n"
"	float4 res00 = (float4)(0) ;\n"
"	float4 res01 = (float4)(0) ;\n"
"	float4 res02 = (float4)(0) ;\n"
"	float4 res03 = (float4)(0) ;\n"
"	__local float local_lhs[2080];\n"
"	lhs_internal_size1/=4;\n"
"	rhs_internal_size2/=4;\n"
"	res_internal_size1/=4;\n"
"	unsigned int block_num = lhs_internal_size2/64;\n"
"	__global float4* res_ptr = res + (get_global_id(0)*1)+ (get_global_id(1)*4)*res_internal_size1;\n"
"	__global float4 * rhs_ptr_0 = rhs + (0 + get_local_id(1)*4 +  get_group_id(1)*128)*rhs_internal_size2+ (0);\n"
"	__global float4 * rhs_ptr_1 = rhs + (1 + get_local_id(1)*4 +  get_group_id(1)*128)*rhs_internal_size2+ (0);\n"
"	__global float4 * rhs_ptr_2 = rhs + (2 + get_local_id(1)*4 +  get_group_id(1)*128)*rhs_internal_size2+ (0);\n"
"	__global float4 * rhs_ptr_3 = rhs + (3 + get_local_id(1)*4 +  get_group_id(1)*128)*rhs_internal_size2+ (0);\n"
"	unsigned int offsetLHS = (get_group_id(0)*8)+ (0)*lhs_internal_size1;\n"
"	for(unsigned int bl=0 ; bl<block_num ; ++bl){\n"
"		barrier(CLK_LOCAL_MEM_FENCE);\n"
"		for(unsigned int i = get_local_id(0) ; i < 8; i+= get_local_size(0)){\n"
"			for(unsigned int j = get_local_id(1) ; j < 64; j+= get_local_size(1)){\n"
"				float4 val = lhs[offsetLHS+ j*lhs_internal_size1 + i];\n"
"				__local float* ptr = local_lhs + i*260+ j;\n"
"				*ptr =  val.s0;\n"
"				ptr += 65;\n"
"				*ptr =  val.s1;\n"
"				ptr += 65;\n"
"				*ptr =  val.s2;\n"
"				ptr += 65;\n"
"				*ptr =  val.s3;\n"
"				ptr += 65;\n"
"			}\n"
"		}\n"
"		barrier(CLK_LOCAL_MEM_FENCE);\n"
"		__local float* ptr_lhs_0 = local_lhs + (get_local_id(0)*4+0)*65;\n"
"		__local float* ptr_lhs_1 = local_lhs + (get_local_id(0)*4+1)*65;\n"
"		__local float* ptr_lhs_2 = local_lhs + (get_local_id(0)*4+2)*65;\n"
"		__local float* ptr_lhs_3 = local_lhs + (get_local_id(0)*4+3)*65;\n"
"		 for(unsigned int bs=0 ; bs < 8 ; ++bs){\n"
"			float4 val_rhs_0_0 = *rhs_ptr_0;++rhs_ptr_0;\n"
"			float4 val_rhs_0_1 = *rhs_ptr_0;++rhs_ptr_0;\n"
"			float4 val_rhs_1_0 = *rhs_ptr_1;++rhs_ptr_1;\n"
"			float4 val_rhs_1_1 = *rhs_ptr_1;++rhs_ptr_1;\n"
"			float4 val_rhs_2_0 = *rhs_ptr_2;++rhs_ptr_2;\n"
"			float4 val_rhs_2_1 = *rhs_ptr_2;++rhs_ptr_2;\n"
"			float4 val_rhs_3_0 = *rhs_ptr_3;++rhs_ptr_3;\n"
"			float4 val_rhs_3_1 = *rhs_ptr_3;++rhs_ptr_3;\n"
"			float val_lhs_0_0 = * ptr_lhs_0++;\n"
"			float val_lhs_1_0 = * ptr_lhs_1++;\n"
"			float val_lhs_2_0 = * ptr_lhs_2++;\n"
"			float val_lhs_3_0 = * ptr_lhs_3++;\n"
"			float val_lhs_0_1 = * ptr_lhs_0++;\n"
"			float val_lhs_1_1 = * ptr_lhs_1++;\n"
"			float val_lhs_2_1 = * ptr_lhs_2++;\n"
"			float val_lhs_3_1 = * ptr_lhs_3++;\n"
"			float val_lhs_0_2 = * ptr_lhs_0++;\n"
"			float val_lhs_1_2 = * ptr_lhs_1++;\n"
"			float val_lhs_2_2 = * ptr_lhs_2++;\n"
"			float val_lhs_3_2 = * ptr_lhs_3++;\n"
"			float val_lhs_0_3 = * ptr_lhs_0++;\n"
"			float val_lhs_1_3 = * ptr_lhs_1++;\n"
"			float val_lhs_2_3 = * ptr_lhs_2++;\n"
"			float val_lhs_3_3 = * ptr_lhs_3++;\n"
"			float val_lhs_0_4 = * ptr_lhs_0++;\n"
"			float val_lhs_1_4 = * ptr_lhs_1++;\n"
"			float val_lhs_2_4 = * ptr_lhs_2++;\n"
"			float val_lhs_3_4 = * ptr_lhs_3++;\n"
"			float val_lhs_0_5 = * ptr_lhs_0++;\n"
"			float val_lhs_1_5 = * ptr_lhs_1++;\n"
"			float val_lhs_2_5 = * ptr_lhs_2++;\n"
"			float val_lhs_3_5 = * ptr_lhs_3++;\n"
"			float val_lhs_0_6 = * ptr_lhs_0++;\n"
"			float val_lhs_1_6 = * ptr_lhs_1++;\n"
"			float val_lhs_2_6 = * ptr_lhs_2++;\n"
"			float val_lhs_3_6 = * ptr_lhs_3++;\n"
"			float val_lhs_0_7 = * ptr_lhs_0++;\n"
"			float val_lhs_1_7 = * ptr_lhs_1++;\n"
"			float val_lhs_2_7 = * ptr_lhs_2++;\n"
"			float val_lhs_3_7 = * ptr_lhs_3++;\n"
"			res00.s0+=val_lhs_0_0*val_rhs_0_0.s0;\n"
"			res00.s1+=val_lhs_1_0*val_rhs_0_0.s0;\n"
"			res00.s2+=val_lhs_2_0*val_rhs_0_0.s0;\n"
"			res00.s3+=val_lhs_3_0*val_rhs_0_0.s0;\n"
"			res01.s0+=val_lhs_0_0*val_rhs_1_0.s0;\n"
"			res01.s1+=val_lhs_1_0*val_rhs_1_0.s0;\n"
"			res01.s2+=val_lhs_2_0*val_rhs_1_0.s0;\n"
"			res01.s3+=val_lhs_3_0*val_rhs_1_0.s0;\n"
"			res02.s0+=val_lhs_0_0*val_rhs_2_0.s0;\n"
"			res02.s1+=val_lhs_1_0*val_rhs_2_0.s0;\n"
"			res02.s2+=val_lhs_2_0*val_rhs_2_0.s0;\n"
"			res02.s3+=val_lhs_3_0*val_rhs_2_0.s0;\n"
"			res03.s0+=val_lhs_0_0*val_rhs_3_0.s0;\n"
"			res03.s1+=val_lhs_1_0*val_rhs_3_0.s0;\n"
"			res03.s2+=val_lhs_2_0*val_rhs_3_0.s0;\n"
"			res03.s3+=val_lhs_3_0*val_rhs_3_0.s0;\n"
"			res00.s0+=val_lhs_0_1*val_rhs_0_0.s1;\n"
"			res00.s1+=val_lhs_1_1*val_rhs_0_0.s1;\n"
"			res00.s2+=val_lhs_2_1*val_rhs_0_0.s1;\n"
"			res00.s3+=val_lhs_3_1*val_rhs_0_0.s1;\n"
"			res01.s0+=val_lhs_0_1*val_rhs_1_0.s1;\n"
"			res01.s1+=val_lhs_1_1*val_rhs_1_0.s1;\n"
"			res01.s2+=val_lhs_2_1*val_rhs_1_0.s1;\n"
"			res01.s3+=val_lhs_3_1*val_rhs_1_0.s1;\n"
"			res02.s0+=val_lhs_0_1*val_rhs_2_0.s1;\n"
"			res02.s1+=val_lhs_1_1*val_rhs_2_0.s1;\n"
"			res02.s2+=val_lhs_2_1*val_rhs_2_0.s1;\n"
"			res02.s3+=val_lhs_3_1*val_rhs_2_0.s1;\n"
"			res03.s0+=val_lhs_0_1*val_rhs_3_0.s1;\n"
"			res03.s1+=val_lhs_1_1*val_rhs_3_0.s1;\n"
"			res03.s2+=val_lhs_2_1*val_rhs_3_0.s1;\n"
"			res03.s3+=val_lhs_3_1*val_rhs_3_0.s1;\n"
"			res00.s0+=val_lhs_0_2*val_rhs_0_0.s2;\n"
"			res00.s1+=val_lhs_1_2*val_rhs_0_0.s2;\n"
"			res00.s2+=val_lhs_2_2*val_rhs_0_0.s2;\n"
"			res00.s3+=val_lhs_3_2*val_rhs_0_0.s2;\n"
"			res01.s0+=val_lhs_0_2*val_rhs_1_0.s2;\n"
"			res01.s1+=val_lhs_1_2*val_rhs_1_0.s2;\n"
"			res01.s2+=val_lhs_2_2*val_rhs_1_0.s2;\n"
"			res01.s3+=val_lhs_3_2*val_rhs_1_0.s2;\n"
"			res02.s0+=val_lhs_0_2*val_rhs_2_0.s2;\n"
"			res02.s1+=val_lhs_1_2*val_rhs_2_0.s2;\n"
"			res02.s2+=val_lhs_2_2*val_rhs_2_0.s2;\n"
"			res02.s3+=val_lhs_3_2*val_rhs_2_0.s2;\n"
"			res03.s0+=val_lhs_0_2*val_rhs_3_0.s2;\n"
"			res03.s1+=val_lhs_1_2*val_rhs_3_0.s2;\n"
"			res03.s2+=val_lhs_2_2*val_rhs_3_0.s2;\n"
"			res03.s3+=val_lhs_3_2*val_rhs_3_0.s2;\n"
"			res00.s0+=val_lhs_0_3*val_rhs_0_0.s3;\n"
"			res00.s1+=val_lhs_1_3*val_rhs_0_0.s3;\n"
"			res00.s2+=val_lhs_2_3*val_rhs_0_0.s3;\n"
"			res00.s3+=val_lhs_3_3*val_rhs_0_0.s3;\n"
"			res01.s0+=val_lhs_0_3*val_rhs_1_0.s3;\n"
"			res01.s1+=val_lhs_1_3*val_rhs_1_0.s3;\n"
"			res01.s2+=val_lhs_2_3*val_rhs_1_0.s3;\n"
"			res01.s3+=val_lhs_3_3*val_rhs_1_0.s3;\n"
"			res02.s0+=val_lhs_0_3*val_rhs_2_0.s3;\n"
"			res02.s1+=val_lhs_1_3*val_rhs_2_0.s3;\n"
"			res02.s2+=val_lhs_2_3*val_rhs_2_0.s3;\n"
"			res02.s3+=val_lhs_3_3*val_rhs_2_0.s3;\n"
"			res03.s0+=val_lhs_0_3*val_rhs_3_0.s3;\n"
"			res03.s1+=val_lhs_1_3*val_rhs_3_0.s3;\n"
"			res03.s2+=val_lhs_2_3*val_rhs_3_0.s3;\n"
"			res03.s3+=val_lhs_3_3*val_rhs_3_0.s3;\n"
"			res00.s0+=val_lhs_0_4*val_rhs_0_1.s0;\n"
"			res00.s1+=val_lhs_1_4*val_rhs_0_1.s0;\n"
"			res00.s2+=val_lhs_2_4*val_rhs_0_1.s0;\n"
"			res00.s3+=val_lhs_3_4*val_rhs_0_1.s0;\n"
"			res01.s0+=val_lhs_0_4*val_rhs_1_1.s0;\n"
"			res01.s1+=val_lhs_1_4*val_rhs_1_1.s0;\n"
"			res01.s2+=val_lhs_2_4*val_rhs_1_1.s0;\n"
"			res01.s3+=val_lhs_3_4*val_rhs_1_1.s0;\n"
"			res02.s0+=val_lhs_0_4*val_rhs_2_1.s0;\n"
"			res02.s1+=val_lhs_1_4*val_rhs_2_1.s0;\n"
"			res02.s2+=val_lhs_2_4*val_rhs_2_1.s0;\n"
"			res02.s3+=val_lhs_3_4*val_rhs_2_1.s0;\n"
"			res03.s0+=val_lhs_0_4*val_rhs_3_1.s0;\n"
"			res03.s1+=val_lhs_1_4*val_rhs_3_1.s0;\n"
"			res03.s2+=val_lhs_2_4*val_rhs_3_1.s0;\n"
"			res03.s3+=val_lhs_3_4*val_rhs_3_1.s0;\n"
"			res00.s0+=val_lhs_0_5*val_rhs_0_1.s1;\n"
"			res00.s1+=val_lhs_1_5*val_rhs_0_1.s1;\n"
"			res00.s2+=val_lhs_2_5*val_rhs_0_1.s1;\n"
"			res00.s3+=val_lhs_3_5*val_rhs_0_1.s1;\n"
"			res01.s0+=val_lhs_0_5*val_rhs_1_1.s1;\n"
"			res01.s1+=val_lhs_1_5*val_rhs_1_1.s1;\n"
"			res01.s2+=val_lhs_2_5*val_rhs_1_1.s1;\n"
"			res01.s3+=val_lhs_3_5*val_rhs_1_1.s1;\n"
"			res02.s0+=val_lhs_0_5*val_rhs_2_1.s1;\n"
"			res02.s1+=val_lhs_1_5*val_rhs_2_1.s1;\n"
"			res02.s2+=val_lhs_2_5*val_rhs_2_1.s1;\n"
"			res02.s3+=val_lhs_3_5*val_rhs_2_1.s1;\n"
"			res03.s0+=val_lhs_0_5*val_rhs_3_1.s1;\n"
"			res03.s1+=val_lhs_1_5*val_rhs_3_1.s1;\n"
"			res03.s2+=val_lhs_2_5*val_rhs_3_1.s1;\n"
"			res03.s3+=val_lhs_3_5*val_rhs_3_1.s1;\n"
"			res00.s0+=val_lhs_0_6*val_rhs_0_1.s2;\n"
"			res00.s1+=val_lhs_1_6*val_rhs_0_1.s2;\n"
"			res00.s2+=val_lhs_2_6*val_rhs_0_1.s2;\n"
"			res00.s3+=val_lhs_3_6*val_rhs_0_1.s2;\n"
"			res01.s0+=val_lhs_0_6*val_rhs_1_1.s2;\n"
"			res01.s1+=val_lhs_1_6*val_rhs_1_1.s2;\n"
"			res01.s2+=val_lhs_2_6*val_rhs_1_1.s2;\n"
"			res01.s3+=val_lhs_3_6*val_rhs_1_1.s2;\n"
"			res02.s0+=val_lhs_0_6*val_rhs_2_1.s2;\n"
"			res02.s1+=val_lhs_1_6*val_rhs_2_1.s2;\n"
"			res02.s2+=val_lhs_2_6*val_rhs_2_1.s2;\n"
"			res02.s3+=val_lhs_3_6*val_rhs_2_1.s2;\n"
"			res03.s0+=val_lhs_0_6*val_rhs_3_1.s2;\n"
"			res03.s1+=val_lhs_1_6*val_rhs_3_1.s2;\n"
"			res03.s2+=val_lhs_2_6*val_rhs_3_1.s2;\n"
"			res03.s3+=val_lhs_3_6*val_rhs_3_1.s2;\n"
"			res00.s0+=val_lhs_0_7*val_rhs_0_1.s3;\n"
"			res00.s1+=val_lhs_1_7*val_rhs_0_1.s3;\n"
"			res00.s2+=val_lhs_2_7*val_rhs_0_1.s3;\n"
"			res00.s3+=val_lhs_3_7*val_rhs_0_1.s3;\n"
"			res01.s0+=val_lhs_0_7*val_rhs_1_1.s3;\n"
"			res01.s1+=val_lhs_1_7*val_rhs_1_1.s3;\n"
"			res01.s2+=val_lhs_2_7*val_rhs_1_1.s3;\n"
"			res01.s3+=val_lhs_3_7*val_rhs_1_1.s3;\n"
"			res02.s0+=val_lhs_0_7*val_rhs_2_1.s3;\n"
"			res02.s1+=val_lhs_1_7*val_rhs_2_1.s3;\n"
"			res02.s2+=val_lhs_2_7*val_rhs_2_1.s3;\n"
"			res02.s3+=val_lhs_3_7*val_rhs_2_1.s3;\n"
"			res03.s0+=val_lhs_0_7*val_rhs_3_1.s3;\n"
"			res03.s1+=val_lhs_1_7*val_rhs_3_1.s3;\n"
"			res03.s2+=val_lhs_2_7*val_rhs_3_1.s3;\n"
"			res03.s3+=val_lhs_3_7*val_rhs_3_1.s3;\n"
"		}\n"
"		offsetLHS += 64*lhs_internal_size1;\n"
"	}\n"
"	*res_ptr = (beta != 0) ? alpha*res00 + beta * *res_ptr : alpha*res00;\n"
"	res_ptr++;\n"
"	res_ptr+=res_internal_size1 - 1;\n"
"	*res_ptr = (beta != 0) ? alpha*res01 + beta * *res_ptr : alpha*res01;\n"
"	res_ptr++;\n"
"	res_ptr+=res_internal_size1 - 1;\n"
"	*res_ptr = (beta != 0) ? alpha*res02 + beta * *res_ptr : alpha*res02;\n"
"	res_ptr++;\n"
"	res_ptr+=res_internal_size1 - 1;\n"
"	*res_ptr = (beta != 0) ? alpha*res03 + beta * *res_ptr : alpha*res03;\n"
"	res_ptr++;\n"
"}\n"
; //matrix_prod_col_row_col_align1_prod_AT_amd

const char * const matrix_prod_col_row_col_align1_prod16_TT = 
"// file automatically generated - do not edit!\n"
"// matrix-matrix multiplication C = A^T * B^T\n"
"// matrix layouts: C...col_major, A...col_major, B...row_major\n"
"__kernel void prod16_TT(\n"
"          float alpha,\n"
"          __global const float * A,\n"
"          unsigned int A_row_start,\n"
"          unsigned int A_col_start,\n"
"          unsigned int A_row_inc,\n"
"          unsigned int A_col_inc,\n"
"          unsigned int A_row_size,\n"
"          unsigned int A_col_size,\n"
"          unsigned int A_internal_rows,\n"
"          unsigned int A_internal_cols,\n"
"          __global const float * B,  \n"
"          unsigned int B_row_start,\n"
"          unsigned int B_col_start,\n"
"          unsigned int B_row_inc,\n"
"          unsigned int B_col_inc,\n"
"          unsigned int B_row_size,\n"
"          unsigned int B_col_size,\n"
"          unsigned int B_internal_rows,\n"
"          unsigned int B_internal_cols,\n"
"          float beta,\n"
"          __global float * C,\n"
"          unsigned int C_row_start,\n"
"          unsigned int C_col_start,\n"
"          unsigned int C_row_inc,\n"
"          unsigned int C_col_inc,\n"
"          unsigned int C_row_size,\n"
"          unsigned int C_col_size,\n"
"          unsigned int C_internal_rows,\n"
"          unsigned int C_internal_cols) \n"
"{ \n"
"  size_t row_block_id = get_group_id(1);\n"
"  size_t col_block_id = get_group_id(0);\n"
"  size_t row_thread_id = get_local_id(1);\n"
"  size_t col_thread_id = get_local_id(0);\n"
"  __local float As[256];\n"
"  float cv[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n"
"  size_t aBegin = (row_block_id * 16 * A_col_inc + A_col_start) * A_internal_rows + A_row_start;\n"
"  size_t aStep = 16 * A_row_inc;\n"
"  size_t aEnd = aBegin + A_row_inc * A_row_size;\n"
"  size_t bBegin = (col_block_id * 64 * B_row_inc + B_row_start) * B_internal_cols + B_col_start;\n"
"  size_t bStep = 16 * B_col_inc;\n"
"  for(size_t a = aBegin, b = bBegin; a < aEnd; a += aStep, b += bStep) { \n"
"    for(size_t i = 0; i < 4; i++)  \n"
"      As[ (i*4 + row_thread_id) + 16 * col_thread_id] = (A[a + A_internal_rows * A_col_inc * (i * 4 + row_thread_id) + A_row_inc * col_thread_id]);\n"
"    barrier(CLK_LOCAL_MEM_FENCE); \n"
"    __local  float *ap = As; \n"
"    __global const float *bp = B + (b + (16 * row_thread_id + col_thread_id) * B_row_inc * B_internal_cols); \n"
"    for(size_t i = 0; i < 16; i++) { \n"
"      float bv = bp[i * B_col_inc]; \n"
"      for(size_t k = 0; k < 16; k++)  \n"
"	    cv[k] += ap[k] * bv; \n"
"      ap += 16; \n"
"    } \n"
"    barrier(CLK_LOCAL_MEM_FENCE); \n"
"  } \n"
"  int c = C_row_inc * 16 * row_block_id + C_row_start + (64 * C_col_inc * col_block_id + C_col_start) * C_internal_rows \n"
"          + C_internal_rows * C_col_inc * (16 * row_thread_id + col_thread_id); \n"
"  for(size_t i = 0; i < 16; i++) { \n"
"    C[c] = (beta == 0) ? alpha * cv[i] : alpha * cv[i] + beta * C[c]; \n"
"      c += C_row_inc; \n"
"  } \n"
"} \n"
; //matrix_prod_col_row_col_align1_prod16_TT

const char * const matrix_prod_col_row_col_align1_prod16_AT = 
"// file automatically generated - do not edit!\n"
"// matrix-matrix multiplication C = A * B^T\n"
"// matrix layouts: C...col_major, A...col_major, B...row_major\n"
"__kernel void prod16_AT(\n"
"          float alpha,\n"
"          __global const float * A,\n"
"          unsigned int A_row_start,\n"
"          unsigned int A_col_start,\n"
"          unsigned int A_row_inc,\n"
"          unsigned int A_col_inc,\n"
"          unsigned int A_row_size,\n"
"          unsigned int A_col_size,\n"
"          unsigned int A_internal_rows,\n"
"          unsigned int A_internal_cols,\n"
"          __global const float * B,  \n"
"          unsigned int B_row_start,\n"
"          unsigned int B_col_start,\n"
"          unsigned int B_row_inc,\n"
"          unsigned int B_col_inc,\n"
"          unsigned int B_row_size,\n"
"          unsigned int B_col_size,\n"
"          unsigned int B_internal_rows,\n"
"          unsigned int B_internal_cols,\n"
"          float beta,\n"
"          __global float * C,\n"
"          unsigned int C_row_start,\n"
"          unsigned int C_col_start,\n"
"          unsigned int C_row_inc,\n"
"          unsigned int C_col_inc,\n"
"          unsigned int C_row_size,\n"
"          unsigned int C_col_size,\n"
"          unsigned int C_internal_rows,\n"
"          unsigned int C_internal_cols) \n"
"{ \n"
"  size_t row_block_id = get_group_id(1);\n"
"  size_t col_block_id = get_group_id(0);\n"
"  size_t row_thread_id = get_local_id(1);\n"
"  size_t col_thread_id = get_local_id(0);\n"
"  __local float As[256];\n"
"  float cv[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n"
"  size_t aBegin = (row_block_id * 16 * A_row_inc + A_row_start) + A_col_start * A_internal_rows;\n"
"  size_t aStep = 16 * A_internal_rows * A_col_inc;\n"
"  size_t aEnd = aBegin + A_internal_rows * A_col_inc * A_col_size;\n"
"  size_t bBegin = (col_block_id * 64 * B_row_inc + B_row_start) * B_internal_cols + B_col_start;\n"
"  size_t bStep = 16 * B_col_inc;\n"
"  for(size_t a = aBegin, b = bBegin; a < aEnd; a += aStep, b += bStep) { \n"
"    for(size_t i = 0; i < 4; i++)  \n"
"      As[ (i*4 + row_thread_id) + 16 * col_thread_id] = (A[a + A_row_inc * (i * 4 + row_thread_id) + A_internal_rows * A_col_inc * col_thread_id]);\n"
"    barrier(CLK_LOCAL_MEM_FENCE); \n"
"    __local  float *ap = As; \n"
"    __global const float *bp = B + (b + (16 * row_thread_id + col_thread_id) * B_row_inc * B_internal_cols); \n"
"    for(size_t i = 0; i < 16; i++) { \n"
"      float bv = bp[i * B_col_inc]; \n"
"      for(size_t k = 0; k < 16; k++)  \n"
"	    cv[k] += ap[k] * bv; \n"
"      ap += 16; \n"
"    } \n"
"    barrier(CLK_LOCAL_MEM_FENCE); \n"
"  } \n"
"  int c = C_row_inc * 16 * row_block_id + C_row_start + (64 * C_col_inc * col_block_id + C_col_start) * C_internal_rows \n"
"          + C_internal_rows * C_col_inc * (16 * row_thread_id + col_thread_id); \n"
"  for(size_t i = 0; i < 16; i++) { \n"
"    C[c] = (beta == 0) ? alpha * cv[i] : alpha * cv[i] + beta * C[c]; \n"
"      c += C_row_inc; \n"
"  } \n"
"} \n"
; //matrix_prod_col_row_col_align1_prod16_AT

  }  //namespace kernels
 }  //namespace linalg
}  //namespace viennacl
#endif

