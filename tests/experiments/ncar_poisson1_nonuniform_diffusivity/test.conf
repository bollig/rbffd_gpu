# Basic test case to prove code works
DIMENSION = 2

INNER_RADIUS = 0.5
OUTER_RADIUS = 1.0

NB_INNER_BND = 20
NB_OUTER_BND = 40
# total number of boundary nodes
NB_BOUNDARY  = 60
# total number of interior nodes
NB_INTERIOR  = 240

NB_SAMPLES = 80000

STENCIL_SIZE = 10

IT_MAX_BOUNDARY = 60
IT_MAX_INTERIOR = 100

# Epsilon for the Radial Basis Functions
EPSILON = 0.8

###############
# SWITCHES
###############
# 0 = Dirichlet; 1 = Neumann; 2 = Robin
BOUNDARY_CONDITION = 0

###############
# BOOLEANS
###############

# Disable non-uniform diffusivity
USE_UNIFORM_DIFFUSIVITY = 1

# (0:FALSE; 1:TRUE) Compute a discrete approximation for RHS values for the Discrete Compat. Condition
USE_DISCRETE_RHS = 0

# (0:FALSE; 1:TRUE) Disable the solution constraint on Neumann and Robin boundary conditions
DISABLE_SOL_CONSTRAINT = 0

# (0:FALSE; 1:TRUE) Should we enforce symmetric stencils by removing unsymmetric edges in the node graph? 
FORCE_SYMMETRIC_STENCILS = 1

# (0:FALSE; 1:TRUE) Test the results when a single dirichlet node is specified on each boundary
TEST_DIRICHLET_LOCKDOWN = 1

# (0:FALSE; 1:TRUE) Should we run the extensive derivative tests on the weights to check precision? 
RUN_DERIVATIVE_TESTS = 1

# Should we solve A x = b where A=L+L' (symmetric weighting?)
CHECK_L_PLUS_L_TRANSPOSE = 0

# (0:FALSE; 1:TRUE) Enable/disable debugging prints
DEBUG_MODE = 0

